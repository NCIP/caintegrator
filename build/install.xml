<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/caintegrator2-war/trunk/software/install.xml $
-->
<project name="caintegrator-cacore-caintegrator2-war-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		TBD
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="project.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>

	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<echo message="application.base.path=${application.base.path}"/>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>

	
	<!-- Generic properties -->
	<property name="log.dir" value="${basedir}/logs" />
	<property name="working.dir" value="${basedir}/working" />
	<property name="temp.dir" value="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" value="bda-utils" />
	<property name="tools.dir.src" value="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.target" value="${working.dir}/${common.dist.relative.dir}" />
	<property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dir.target" value="${working.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- *-ds.xml and WAR -->
	<property name="caintegrator2-war.dir.dist" value="${basedir}/${caintegrator2-war.dist.relative.dir}" />
	<property name="caintegrator2-war.ds.file" value="caintegrator2-mysql-ds.xml" />
	<property name="caintegrator2-war.war.file" value="caintegrator2.war" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
			<pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
			<pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>

	<!-- Conditionals -->
	<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
	<!-- caintegrator2-war can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${database.type}">
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
			<property name="is.mysql" value="true"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>

	<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
	<propertyregex property="properties.file.type"
		input="${properties.file}"
		regexp=".*(install|upgrade).*"
		select="\1"
		/>
	<echo message="Properties file type = ${properties.file.type}"/>
	<switch value="${properties.file.type}">
		<case value="install">
			<property name="properties.template.file" value="install-properties.template" />
		</case>
		<case value="upgrade">
			<property name="properties.template.file" value="upgrade-properties.template" />
		</case>
		<default>
			<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
		</default>
	</switch>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging --> 
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start"/>


	<!-- Installer section -->
	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem">
		<sleep seconds="5" />
		<delete dir="${jboss.home}" quiet="false" />
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<filterset id="filterset.pre">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
		</filterset>
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<echo  message="Checking if database properties exist: ${db.prop.list}"/>
		<properties-exist properties.list="${db.prop.list}"/>

		<mkdir dir="${working.dir}" />
		<delete dir="${working.dir}"/>
		<mkdir dir="${working.dir}" />
		<mkdir dir="${resource.dir.temp}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre and then copy with filter files -->
		<copy todir="${common.dir.target}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
	</target>
	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="install:init">
		<!-- do nothing since files were copied and filtered with common filter in init -->
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		install:init,
		install:database:prep
		">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="mysql">
				<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/>
			</case>
		</switch>
		<database-upgrade/>
		<database-tag/>
	</target>


	<target name="install:jboss:binaries" description="Unzip JBoss binary" unless="exclude.jboss">
		<unzip dest="${application.base.path}" src="${tools.dir.src}/${jboss.binaries.file}" />
		<if>    
			<os family="unix"/>
			<then>  
				<chmod dir="${jboss.home}/bin" perm="ugo+rx" 
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:caintegrator2-war" description="Deploy caintegrator2-war caintegrator2-war.ear, caintegrator2-war-api.war and common libraries" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

		<copy file="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		
		<!-- Replace this with file from ivy when project is ivy'fied -->
	</target>

	<target name="install:jboss:caintegrator2-war:configure" description="Configure caintegrator2-war application" unless="exclude.jboss">
		<copy file="${jboss-conf.dir.target}/${caintegrator2-war.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
	</target>

	<!-- Wrapper target to configure jboss container, not deployed application -->
	<target name="install:jboss:configure" description="Configure caintegrator2-war" unless="exclude.jboss"
		depends="install:jboss:binaries,
		-install:jboss:configure:secure-console,
		-install:jboss:configure:ports,
		-install:jboss:configure:login-conf,
		-install:jboss:configure:log4j,
		-install:jboss:configure:update-shutdown
		"/>

	        <target name="-install:jboss:configure:secure-console" description="Configure JBoss ports using bindings files" unless="exclude.jboss">
			<secure-jboss-console/>
		</target>
	<!-- Configure ports used by JBOSS (either bindings or editing jboss config.files) -->
	<target name="-install:jboss:configure:ports" description="Configure caintegrator2-war" unless="exclude.jboss">
		<jboss-bindings
			jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml"
			/>
	</target>

	<!-- Add custom login-config.xml content from snippet from caintegrator2-war/software/resources/deploy/login-config.${auth.type}-block.xml -->
	<target name="-install:jboss:configure:login-conf" unless="exclude.jboss">
		<if>    
			<equals arg1="${authentication.type}" arg2="ldap"/>
			<then>  
				<property name="login-config.block.file" value="${jboss-conf.dir.target}/login-config.ldap-block.xml"/>
			</then> 
			<else>  
				<if>    
					<equals arg1="${authentication.type}" arg2="db"/>
					<then>  
						<property name="login-config.block.file" value="${jboss-conf.dir.target}/login-config.db-block.xml"/>
					</then> 
					<else>  
						<fail message="${authentication.type} is not a valid authentiation type, please change to db or ldap and re-run the build."/>
					</else> 
				</if>   
			</else> 
		</if>   
		<echo message="Inserting ${login-config.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" verbose="false">
			<insertbranch path="//policy" srcxmlfile="${login-config.block.file}" srcpath="//application-policy" />
		</xmlconfig>
	</target>

	<!-- Configure MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target name="-install:jboss:configure:jbossmq-dest" unless="exclude.jboss">
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
	</target>


	<!-- Configure log4j settings based on contents of caintegrator2-war/software/resrouces/deploy/log4j.block.xml -->
	<target name="-install:jboss:configure:log4j" unless="exclude.jboss">
		<!--
		<property name="jboss.log4j.file" value="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"/>
		<property name="log4j.block.file" value="${jboss-conf.dir.target}/log4j.block.xml"/>
		<copy tofile="${jboss.log4j.file}.orig" file="${jboss.log4j.file}"/>

		## Replace the doctype of the xml with a generic one so it does not try resolve dtd 
		<pre-xmlconfig
			file.location="${jboss.log4j.file}"
			old-value.property.name="log4j.doctype.line"
			/>
		## log4j has namespace configurations in log4j:configuration element so rename to simple no ns element 
		<pre-xmlconfig
			search.pattern="&lt;log4j\:configuration.*"
			replace.pattern="&lt;configuration&gt;"
			file.location="${jboss.log4j.file}"
			old-value.property.name="log4j.begin-configuration.line"
			/>
		## log4j has namespace configurations in log4j:configuration element so rename to simple no ns element 
		<pre-xmlconfig
			search.pattern="&lt;\/log4j\:configuration&gt;"
			replace.pattern="&lt;\/configuration&gt;"
			file.location="${jboss.log4j.file}"
			old-value.property.name="log4j.end-configuration.line"
			/>
		<echo message="beg- ${log4j.begin-configuration.line}"/>
		<echo message="end- ${log4j.end-configuration.line}"/>
		<copy tofile="${jboss.log4j.file}.bxc" file="${jboss.log4j.file}"/>

		<xmlconfig in="${jboss.log4j.file}" verbose="false">
			<insertbranch path="//configuration" srcxmlfile="${log4j.block.file}" srcpath="//category[1]" />
			<insertbranch path="//configuration" srcxmlfile="${log4j.block.file}" srcpath="//category[2]" />
		</xmlconfig>

		## Restore original log4j:configuration line 
		<post-xmlconfig
			search.pattern="&lt;configuration&gt;"
			file.location="${jboss.log4j.file}"
			old-value.property.value="${log4j.begin-configuration.line}"
			/>
		## Restore original log4j:configuration closing line 
		<post-xmlconfig
			search.pattern="&lt;\/configuration&gt;"
			file.location="${jboss.log4j.file}"
			old-value.property.value="${log4j.end-configuration.line}"
			/>
		## Restore doctype to modified file 
		<post-xmlconfig
			file.location="${jboss.log4j.file}"
			old-value.property.value="${log4j.doctype.line}"
			/>
		<fixcrlf file="${jboss.log4j.file}"/>
		-->
	</target>

	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" if="jboss.exists" unless="exclude.jboss">
		<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
		<jboss-stop-jboss />
	</target>
	<target name="install:jboss:start"  unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install">
		<validate-pre-install 
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			database.version="${mysql.minimum.version}"
			/>      
	</target>
	<target name="install:validation:pre-install:ports">
		<validate-ports-preinstall />
	</target>
	<target name="install:validation:post-install">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>
	<target name="-install:jboss:configure:update-shutdown" unless="exclude.jboss">
		<jboss-update-shutdown />
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:jboss:binaries,
		install:jboss:caintegrator2-war:re-configure,
		install:jboss:caintegrator2-war,
		install:jboss:caintegrator2-war:configure,
		install:jboss:configure,
		install:jboss:start
		" />

	<!-- Wrapper target to deploy all containers to one server -->
	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:database,
		install:jboss,
		install:jboss:start,
		install:validation:post-install
		"/>

	<!-- Fixes hibernate dialect and other configurations in code generated at build time.  This is requred because the properties/options selected at build time can be different than those used at install time. -->
	<target name="install:jboss:caintegrator2-war:re-configure" unless="exclude.jboss">
		<delete dir="${working.dir}/caintegrator2-war"/>
		<unzip src="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" dest="${working.dir}/caintegrator2-war"/>
		<copy todir="${working.dir}/caintegrator2-war/WEB-INF/classes" file="${jboss-conf.dir.target}/hibernate.cfg.xml"/>

		<move file="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" tofile="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}.orig"/>
		<war destfile="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" compress="false" webxml="${working.dir}/caintegrator2-war/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/caintegrator2-war">
				<include name="*/**" />
			</fileset>
		</war>
	</target>

	<!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
	<target name="upgrade:jboss" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:jboss:caintegrator2-war:re-configure,
		install:jboss:caintegrator2-war,
		install:jboss:caintegrator2-war:configure,
		install:jboss:start
		" />

	<!-- Wrapper target to upgrade all container. Does not install or configure binaries -->
	<target name="upgrade" description="Deploys application and runs incremental database build" 
		depends="
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		upgrade:database,
		upgrade:jboss,
		install:validation:post-install
		"/>
        
    <!-- Wrapper target to upgrade all container and install the database. Does not install or configure binaries -->
    <target name="upgrade:newdb" description="Deploys application and reinstalls database" 
        depends="
        upgrade:init,
        install:validation:pre-install,
        install:jboss:stop,
        install:init,
        install:database,
        upgrade:jboss,
        install:validation:post-install
        "/>        

	<!-- Wrapper upgrade database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database. -->

	<target name="upgrade:init">
		<jboss-read-dbconfig
			jboss.ds-xml.file="${caintegrator2-war.ds.file}"
			/>
		<jboss-read-ldapconfig
			/>
	</target>
	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		upgrade:init,
		install:init,
		install:database:prep
		">
		<database-upgrade/>
		<database-tag/>
	</target>


	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		upgrade:init,
		install:init,
		install:database:prep
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		upgrade:init,
		install:init,
		install:database:prep
		">
		<database-rollback/>
	</target>

</project>
