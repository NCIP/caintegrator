<project name="caintegrator-cacore-caintegrator-war-installer" default="upgrade" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>TBD</description>

    <!-- Properties file related properties and tasks -->
    <property environment="env" />
    <property file="project.properties"/>
    <property file="local.properties"/>
    <property name="properties.file" value="${basedir}/install.properties"/>
    <echo message="Using properties file of ${properties.file}."/>
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>

    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
    <property file="${properties.file}" />
    <!-- Generic properties -->
    <property name="project.name" value="caintegrator"/>
    <property name="env.name" value="local"/>
    <property name="log.dir" location="${basedir}/logs" />
    <property name="working.dir" location="${basedir}/working" />
    <property name="temp.dir" location="${working.dir}/temp" />
    <property name="bda-db-artifact.dir" location="${basedir}" />


    <!-- Install Time properties -->
    <!-- Source and target directories -->
    <property name="bda-utils.dir" location="bda-utils" />
    <property name="tools.dir" location="${basedir}/${tools.dist.relative.dir}" />
    <property name="common.dir.src" location="${basedir}/${common.dist.relative.dir}" />
    <property name="common.dir.dest" location="${working.dir}/${common.dist.relative.dir}" />
    <property name="db.dir.src" location="${basedir}/${db.dist.relative.dir}" />
    <property name="db.dir.dest" location="${working.dir}/${db.dist.relative.dir}" />
    <property name="db-install.dir.dest" location="${working.dir}/${db-install.dist.relative.dir}" />
    <property name="db-upgrade.src.dir" location="${basedir}/${db-upgrade.dist.relative.dir}/${database.type}" />
    <property name="db-upgrade.dir.dest" location="${working.dir}/${db-upgrade.dist.relative.dir}" />
    <property name="jboss-conf.dir.src" location="${basedir}/${jboss-conf.dist.relative.dir}" />
    <property name="jboss-conf.dir.dest" location="${working.dir}/${jboss-conf.dist.relative.dir}" />

    <!-- deployment XML files and WAR -->
    <property name="caintegrator-war.dir.dist" location="${basedir}/${caintegrator-war.dist.relative.dir}" />
    <property name="caintegrator.jms.file" value="caintegrator-jms-destinations-service.xml" />
    <property name="caintegrator-war.ds.file" value="caintegrator-mysql-ds.xml" />
    <property name="caintegrator-war.mail.service.file" value="mail-service.xml" />
    <property name="caintegrator-war.war.file" value="caintegrator.war" />
    <property name="exclude.jboss.backup" value="true" />

    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- Task definitions -->
    <taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
    <taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

    <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

    <mkdir dir="${working.dir}" />
    <if>
        <isset property="workingdirnodelete"/>
        <then>
            <delete dir="${working.dir}"/>
            <mkdir dir="${working.dir}" />
        </then>
    </if>

    <!-- Start logging moved out of target so all targets are logged -->
    <property name="install-logs.dir" location="${log.dir}"/>
    <!--<property name="install-logs.dir" location="${log.dir}"/>-->
    <mkdir dir="${install-logs.dir}"/>
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

    <target name="common:init:pre">
        <!-- Set application.base.path based on platform -->
        <condition property="application.base.path" value="${application.base.path.linux}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>

        <condition property="application.base.path" value="${application.base.path.windows}">
            <os family="windows" />
        </condition>
        <echo message="application.base.path=${application.base.path}"/>
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
        <jboss-version/>
    </target>
    <target name="install:jboss:init" depends="common:init:pre" >
        <!-- determine if port configurations or port lists are being called -->
        <if>
            <isset property="jboss.ncicb-standard.port-config"/>
            <then>
                 <!-- Read some port properties from standard bindings file -->
                <echo message="Using JBoss NCICB Standard port configurations"/>
                <if>
                    <equals arg1="${jboss.major.version}" arg2="4" />
                    <then>
                        <property name="jboss.server.binding.template.location" value="${basedir}/${jboss4-bindings.file}"/>
                        <jboss-read-ports
                            jboss.server.bindingfile.location="${jboss.server.binding.template.location}" />
                        <jboss-bindings-validate jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
                    />
                    </then>
                    <elseif>
                        <equals arg1="${jboss.major.version}" arg2="5" />
                        <then>
                            <property name="jboss.server.bindingfile.location" value="${basedir}/${jboss-bindings.file}" />
                            <property name="jboss.server.binding.template.location" value="${basedir}/${jboss5-bindings.file}"/>
                            <property name="temp.ejb.file" value="${temp.dir}/ejb3-connectors-jboss-beans.xml" />
                            <copy tofile="${temp.ejb.file}" file="${bda-utils.dir}/resource/jboss-5.1.0.GA/ejb3-connectors-jboss-beans.xml" />
                            <jboss51-bindings-nci jboss.server.bindingfile.location="${jboss.server.binding.template.location}" />
                            <jboss51-read-ports-nci jboss.server.bindingfile.location="${jboss.server.binding.template.location}" jboss.server.ejbfile.location="${temp.ejb.file}" />
                        </then>
                    </elseif>
                </if>
                <echo message="http -${jboss.server.port} "/>
                <echo message="http -${jboss.server.jndi.port} "/>
            </then>
            <else>
                <echo message="Using custom JBoss port configurations"/>
                <if>
                    <equals arg1="${jboss.major.version}" arg2="4" />
                    <then>
                        <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml" 					/>
                    </then>
                    <else>
                        <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings-jboss-beans.xml" 					/>

                    </else>
                </if>
                <properties-exist properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name" />
                <!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
                <properties-exist
properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port,jboss.unifiedinvoker.port,jboss.hajndi.auto.port,jboss.ssl.port,jboss.jms2.netty.port,jboss.jms2.netty-ssl.port,jboss.transaction.recovery.port,jboss.transaction.status.port,jboss.transaction.processid.port"/>
            </else>
        </if>
        <jboss-version />
    </target>
    <target name="common:jboss:init" depends="common:init:pre" unless="exclude.jboss">
        <math result="jboss.ssl.port" operand1="${jboss.server.port}" operation="+" operand2="363" datatype="int"/>
        <property name="jboss.ssl.enable" value="false"/>
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<jboss-version/>
        <property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/caintegrator"/>
        <available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
        <basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
        <dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
        <basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
        <dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
        <basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
        <property name="jboss.socket.ports" value="${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}"/>
    </target>

    <target name="common:init" depends="common:init:pre">
        <property name="install.running" value="true"/>
        <echoproperties prefix="database"/>
        <switch value="${database.type}">
            <case value="mysql">
                <property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
                <property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.1.13.jar"/>
                <property name="database.driver" value="com.mysql.jdbc.Driver"/>
                <property name="database.schema" value="${database.name}"/>
            </case>
            <default>
                <fail message="Invalid database type ${database.type}"/>
            </default>
        </switch>

        <path id="jdbc.driver.classpath">
            <pathelement location="${database.driver.file}"/>
        </path>

        <property name="properties.template.file" value="${basedir}/properties.template" />
        <filterset id="embedded.filterset">
            <filter token="application.base.path" value="${application.base.path}"/>
            <filter token="application.url" value="${application.url}"/>
            <filter token="database.url" value="${database.url}"/>
            <filter token="database.user" value="${database.user}"/>
            <filter token="database.password" value="${database.password}"/>
            <filter token="database.system.url" value="${database.system.url}"/>
            <!-- added internal properties that may be used in a filtered copy -->
            <filter token="database.driver" value="${database.driver}"/>
            <!-- added for liquibase -->
            <filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
            <filter token="jboss.home" value="${jboss.home}"/>
            <filter token="database.dialect" value="${database.dialect}"/>
            <filter token="env.LOGNAME" value="${env.LOGNAME}"/>
            <filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
            <filter token="project.name" value="project.name"/>
        </filterset>

        <!--OS Temp dir -->
        <condition property="os.temp.dir" value="/tmp/${project.name}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>

        <condition property="os.temp.dir" value="c:/temp/${project.name}">
            <os family="windows" />
        </condition>
        <echo message="os.temp.dir - ${os.temp.dir}"/>
        <!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
        <copy todir="${common.dir.dest}" filtering="true">
            <fileset dir="${common.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="embedded.filterset"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
    </target>
    
    <target name="diag">
        <echoproperties/>
    </target>

    <!-- Clean up destination directory -->
    <target name="install:common:clean" description="Removes all files from the local filesystem" depends="common:init,install:jboss:clean">
    </target>

    <target name="install:jboss:clean" unless="exclude.jboss" depends="common:jboss:init,common:init">
        <sleep seconds="5" />
        <property name="backup.count" value="5"/>

        <if>
            <not>
                <equals arg1="${exclude.jboss.backup}" arg2="true"/>
            </not>
            <then>
                <!-- Jboss backup, do not compress until install is finished -->
                <property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss"/>

                <!-- So these directories won't be included in the backup, they are not needed to use jboss -->
                <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
                <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

                <backup-dir
                    src.dir="${jboss.home}"
                    backup.base.dir="${backup.jboss.base.dir}"
                    backup.count="${backup.count}"
                    />
            </then>
        </if>
        <delete dir="${jboss.home}"/>
    </target>

    <target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="common:init">
        <property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
        <echo  message="Checking if database properties exist: ${db.prop.list}"/>
        <properties-exist properties.list="${db.prop.list}"/>
        <echoproperties prefix="database"/>
        <copy todir="${db.dir.dest}" filtering="true">
            <fileset dir="${db.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="embedded.filterset"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
        <mkdir dir="${os.temp.dir}/${project.name}"/>
        <copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
            <fileset dir="${db.dir.dest}">
                <include name="**/db-upgrade.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
        depends="
        common:init,
        install:database:prep,
        install:database:validation:pre-install
        ">
        <!-- Drop all schema objects or re-create the db -->
        <database-clean/>
        <!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
        <switch value="${database.type}">
            <case value="mysql">
                <database-install
                    db.install.create.file.list="${db.install.create.mysql.file.list}"
                    />
            </case>
        </switch>
        <database-upgrade
            database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
            />
        <database-tag/>
        <antcall target="upgrade:initdb"/>
    </target>

    <target name="upgrade:initdb" description="Runs database initialization scripts." unless="exclude.database" depends="common:init">
        <!-- Run script to initialize application properties table -->
        <mkdir dir="${db-install.dir.dest}/${database.type}" />
        <copy todir="${db-install.dir.dest}/${database.type}" overwrite="true">
            <fileset dir="${db-upgrade.src.dir}" includes="*.sql" />
        </copy>
        <!-- "replace" command for grid.index.url -->
        <replace file="${db-install.dir.dest}/${database.type}/db-init-application-properties.sql"
            token="@grid.index.url@" value="${grid.index.url}" />
        <replace file="${db-install.dir.dest}/${database.type}/db-init-application-properties.sql"
                    token="@user.admin.email.address.to@" value="${user.admin.email.address.to}" />
        <replace file="${db-install.dir.dest}/${database.type}/db-init-application-properties.sql"
                    token="@user.admin.email.address.from@" value="${user.admin.email.address.from}" />
        <replace file="${db-install.dir.dest}/${database.type}/db-init-application-properties.sql"
                    token="@upt.url@" value="${upt.url}" />
        <database-install
            db.install.create.file.list="db-init-application-properties.sql"
            />
    </target>

    <target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss" depends="common:jboss:init, common:init">
        <jboss-install-binaries
            />
        <jboss-nci-customizations
            />
    </target>

    <target name="install:jboss:caintegrator-war" description="Deploy caintegrator-war caintegrator-war.ear, caintegrator-war-api.war and common libraries" unless="exclude.jboss" depends="common:jboss:init, common:init">
        <!-- added to ensure working.dirs are fresh for our install -->
        <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
        <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
        <move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}" failonerror="false"/>

        <copy file="${caintegrator-war.dir.dist}/${caintegrator-war.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
        <copy file="${bda-utils.dir}/clm-4.2.beta_jboss51.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        <copy file="${bda-utils.dir}/commons-digester-2.1.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        <copy file="${bda-utils.dir}/commons-beanutils-1.8.3.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        <copy file="${bda-utils.dir}/cog-tomcat-4.0.3.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        <copy file="${bda-utils.dir}/jcog-1.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        <copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />

        <!-- Replace this with file from ivy when project is ivy'fied -->
    </target>

    <target name="install:jboss:caintegrator-war:configure" description="Configure caintegrator-war application" unless="exclude.jboss" depends="common:jboss:init, common:init">
        <copy file="${jboss-conf.dir.dest}/${caintegrator-war.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
        <copy file="${jboss-conf.dir.dest}/${caintegrator.jms.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy/jms" overwrite="true" />
        <copy file="${jboss-conf.dir.dest}/${caintegrator-war.mail.service.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
    </target>

    <target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss"  depends="common:jboss:init, common:init">
    </target>
    
    <target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
        depends="
        common:jboss:init,
        common:init,
        install:jboss:configure:log4j,
        -install:jboss:configure:web-container
        ">
        <!-- Calls the following macros
        jboss-bindings - configures ports for jboss
        jboss-login-config - sets up authentication
        secure-jboss-console - adds password to jboss console apps
        jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown
        appserver-ssl-configure -  enables ssl
        appserver-configure-external-hostname - configures jboss for use through a reverse proxy
        grid-secure-configure-connector - configures secure grid
        -->
        <!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-configure />
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <copy file="${jboss-conf.dir.dest}/run.conf" tofile="${jboss.home}/bin/run.conf"/>
                <jboss-configure
                    jboss.grid.configure="false"
                    jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"
                    jboss.server.binding.template.location="${jboss.server.binding.template.location}"
                    jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                    proxy.update.connector.port.ssl="${jboss.ssl.port}"
                />
            </then>
        </if>
    </target>

     <target name="-install:jboss:configure:web-container" description="Configure web container for caArray JBoss installation.">
        <xmltask preservetype="true" source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
           dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml">
           <xmlcatalog refid="bda.xml.catalog"/>
           <remove path="/Server/Service[@name='jboss.web']/Connector[@port='29443']" />
        </xmltask>
        <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/context.xml" dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/context.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <copy path="/Context/SessionCookie" property="session.cookie.contents.present"/>
        </xmltask>
        <if>
            <isset property="session.cookie.contents.present"/>
            <then>
        <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/context.xml" dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/context.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <attr path="/Context/SessionCookie" attr="path" value="/"/>
                </xmltask>
            </then>
            <else>
                <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/context.xml" dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/context.xml">
                    <xmlcatalog refid="bda.xml.catalog"/>
                     <insert path="/Context">
                        <![CDATA[
                        <SessionCookie path="/"/>
                        ]]>
                    </insert>
                </xmltask>
            </else>
        </if>
    </target>

    <!-- Calls to bda macros for basic functionality -->
    <target name="install:jboss:stop" description="Stops jboss" unless="exclude.jboss" depends="common:jboss:init,common:init">
        <if>
            <isset property="jboss.exists"/>
            <then>
                <jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
            </then>
        </if>
    </target>

    <target name="install:jboss:start" description="Starts jboss" unless="exclude.jboss" depends="common:jboss:init,common:init">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <jboss-start-jboss />
                <sleep seconds="15"/>
            </then>
        </if>
    </target>
    <target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
        <validate-pre-install-common
            ant.check.version="${ant.minimum.version}"
            java.check.version.major="${java.major.version}"
            java.check.version.minor="${java.minor.version}"
            />
    </target>
    <target name="install:jboss:validation:pre-install" description="Runs pre-install validation checks bda-utils"
        depends="
        common:jboss:init,common:init,
        install:common:validation:pre-install
        ">
        <validate-pre-install-jboss
            />
    </target>
    <target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils"
        depends="
        common:init,
        install:common:validation:pre-install
        ">
        <validate-pre-install-database
            database.version="${mysql.minimum.version}"
            />
    </target>
    <target name="install:jboss:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
        depends="
        common:init,
        install:jboss:stop
        ">
        <validate-pre-jboss-ports
            />
    </target>
    <target name="install:common:validation:post-install" description="Run post-install checks from bda-utils"
        depends="
        common:init
        ">
        <condition property="propertyfile.backup.location" value="/tmp/caintegrator/bda-property-backups">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>
        <condition property="propertyfile.backup.location" value="c:/temp">
            <os family="windows" />
        </condition>

        <validate-post-common
            propertyfile.backup.location="${propertyfile.backup.location}"
            />
    </target>
    <target name="install:jboss:validation:post-install" description="Run post-install checks from bda-utils"
        depends="
        common:jboss:init,
        common:init
        ">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <validate-post-jboss
                    />
            </then>
        </if>
    </target>

    <!-- Wrapper target to deploy JBOSS container -->
    <target name="install:jboss" unless="exclude.jboss"
        depends="
        common:jboss:init,
        common:init,
        install:jboss:init,
        install:jboss:validation:pre-install,
        install:common:validation:pre-install,
        install:jboss:stop,
        install:jboss:validation:pre-install:ports,
        install:jboss:clean,
        install:jboss:binaries,
        install:jboss:configure,
        install:jboss:caintegrator-war:re-configure,
        install:jboss:caintegrator-war,
        install:jboss:caintegrator-war:configure,
        install:post:jboss,
        install:jboss:start,
        install:jboss:validation:post-install
        ">
    </target>

    <!-- Wrapper target to deploy all containers to one server -->
    <target name="install" description="Installs and configures JBOSS, creates database, and deploys application"
        depends="
        common:jboss:init,
        common:init,
        install:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        install:jboss:validation:pre-install:ports,
        install:common:clean,
        install:database,
        install:jboss,
        install:common:post,
        install:jboss:start,
        install:common:validation:post-install
        ">
    </target>

    <!-- Fixes hibernate dialect and other configurations in code generated at build time.  This is requred because the properties/options selected at build time can be different than those used at install time. -->
    <target name="install:jboss:caintegrator-war:re-configure" unless="exclude.jboss" depends="common:init">
        <delete dir="${working.dir}/caintegrator-war"/>
        <unzip src="${caintegrator-war.dir.dist}/${caintegrator-war.war.file}" dest="${working.dir}/caintegrator-war"/>
        <if>
             <equals arg1="${jboss.ssl.enable}" arg2="true"/>
             <then>
                 <property name="jboss.protocol" value="https"/>
             </then>
             <else>
                 <property name="jboss.protocol" value="http"/>
             </else>
         </if>

        <copy todir="${working.dir}/caintegrator-war/WEB-INF" file="${working.dir}/caintegrator-war/WEB-INF/xml/web.xml" filtering="true" overwrite="true">
            <filterset>
                <filter token="git.caintegrator.version" value="${git.caintegrator.version}" />
                <filter token="git.url" value="${git.url}"/>
                <filter token="git.revision" value="${git.revision}"/>
                <filter token="caintegrator.builddate" value="${build.date}"/>
                <filter token="cas.server.hostname" value="${cas.server.hostname}"/>
                <filter token="cas.server.port" value="${cas.server.port}"/>
            </filterset>
        </copy>

        <copy file="${working.dir}/caintegrator-war/WEB-INF/xml/application-config-cas-security.xml"
            todir="${working.dir}/caintegrator-war/WEB-INF/classes" filtering="true" overwrite="true">
            <filterset>
                <filter token="cas.server.hostname" value="${cas.server.hostname}" />
                <filter token="cas.server.port" value="${cas.server.port}"/>
                <filter token="cas.ticket.key" value="${cas.ticket.key}"/>
            	<filter token="jboss.protocol" value="${jboss.protocol}"/>
                <filter token="jboss.server.hostname" value="${jboss.server.hostname}"/>
                <filter token="jboss.server.port" value="${jboss.server.port}"/>
            </filterset>
        </copy>
        
        <copy file="${working.dir}/caintegrator-war/WEB-INF/classes/caintegrator-config.xml" 
            todir="${working.dir}/caintegrator-war/WEB-INF/classes" filtering="true" overwrite="true">
            <filterset>
                <filter token="single.sign.on.install" value="${single.sign.on.install}"/>
            </filterset>
        </copy>
        
        <!-- Uncomment the correct context configuration for CAS SSO or not-->
        <if>
            <equals arg1="${single.sign.on.install}" arg2="true" />
            <then>
                <xmltask source="${working.dir}/caintegrator-war/WEB-INF/web.xml" dest="${working.dir}/caintegrator-war/WEB-INF/web.xml">
                    <uncomment path="//:context-param[:param-name/text()='contextConfigLocation']/:param-value/comment()[2]"/>
                </xmltask>
            </then>
            <else>
                <xmltask source="${working.dir}/caintegrator-war/WEB-INF/web.xml" dest="${working.dir}/caintegrator-war/WEB-INF/web.xml">
                    <uncomment path="//:context-param[:param-name/text()='contextConfigLocation']/:param-value/comment()[4]"/>
                    <remove path="//:context-param[:param-name/text()='ssoEnabled']"/>
                    <remove path="//:context-param[:param-name/text()='casServerLogoutUrl']"/>
                </xmltask>
            </else>
        </if>

        <move file="${caintegrator-war.dir.dist}/${caintegrator-war.war.file}" tofile="${caintegrator-war.dir.dist}/${caintegrator-war.war.file}.orig"/>
        <war destfile="${caintegrator-war.dir.dist}/${caintegrator-war.war.file}" compress="false" webxml="${working.dir}/caintegrator-war/WEB-INF/web.xml" >
            <fileset dir="${working.dir}/caintegrator-war">
                <include name="*/**" />
            </fileset>
        </war>
    </target>

    <!-- Generic targets to call appropriate upgrade path targets, just change the depends to use alternate ugprade path -->
    <target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss" depends="upgrade:jboss:init,common:init,upgrade-ncm:jboss">

    </target>

    <target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-ncm">

    </target>

    <target name="upgrade-with-dbinstall" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-ncm:with-dbinstall">
    </target>
    <target name="upgrade:newdb" description="Deploys application and reinstalls database" depends="upgrade-with-dbinstall">
    </target>

    <!-- Upgrade with Disposable Application Conttainer (DAC) -->
    <target name="upgrade-dac:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
        depends="
        upgrade:jboss:init,
        common:init,
        common:jboss:init,
        install:jboss:validation:pre-install,
        install:common:validation:pre-install,
        install:jboss:stop,
        install:jboss:validation:pre-install:ports,
        install:jboss:clean,
        install:jboss:binaries,
        install:jboss:configure,
        install:jboss:caintegrator-war:re-configure,
        install:jboss:caintegrator-war,
        install:jboss:caintegrator-war:configure,
        upgrade:post:jboss,
        install:post:jboss,
        install:jboss:start,
        install:jboss:validation:post-install
        ">
    </target>

    <target name="upgrade-dac" description="Upgrades JBoss and Database"
        depends="
        upgrade:common:init,
        common:init,
        common:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        upgrade:database,
        upgrade-dac:jboss,
        install:common:validation:post-install
        ">
    </target>

    <target name="upgrade-dac:with-dbinstall" description="Upgrades JBoss and Database"
        depends="
        upgrade:common:init,
        common:init,
        common:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        install:database,
        upgrade-dac:jboss,
        install:common:validation:post-install
        ">
    </target>
    <!-- Upgrade with Container Modification (CM) -->
    <target name="upgrade-cm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
        depends="
        upgrade:jboss:init,
        common:init,
        common:jboss:init,
        install:jboss:validation:pre-install,
        install:common:validation:pre-install,
        install:jboss:stop,
        install:jboss:validation:pre-install:ports,
        install:jboss:configure,
        install:jboss:caintegrator-war:re-configure,
        install:jboss:caintegrator-war,
        install:jboss:caintegrator-war:configure,
        upgrade:post:jboss,
        install:post:jboss,
        install:jboss:start,
        install:jboss:validation:post-install
        ">
    </target>

    <target name="upgrade-cm" description="Upgrades JBoss and Database"
        depends="
        upgrade:common:init,
        common:init,
        common:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        upgrade:database,
        upgrade-cm:jboss,
        install:common:validation:post-install
        ">
    </target>

    <target name="upgrade-cm:with-dbinstall" description="Upgrades JBoss and Database"
        depends="
        upgrade:common:init,
        common:init,
        common:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        install:database,
        upgrade-cm:jboss,
        install:common:validation:post-install
        ">
    </target>
    <!-- Upgrade with No Container Modification (NCM) -->
    <target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
        depends="
        upgrade:jboss:init,
        common:init,
        common:jboss:init,
        install:jboss:validation:pre-install,
        install:common:validation:pre-install,
        install:jboss:stop,
        install:jboss:validation:pre-install:ports,
        install:jboss:caintegrator-war:re-configure,
        install:jboss:caintegrator-war,
        install:jboss:caintegrator-war:configure,
        upgrade:post:jboss,
        install:post:jboss,
        install:jboss:start,
        install:jboss:validation:post-install
        ">
    </target>

    <target name="upgrade-ncm" description="Upgrades JBoss and Database"
        depends="
        upgrade:common:init,
        common:init,
        common:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        upgrade:database,
        upgrade-ncm:jboss,
        install:common:validation:post-install
        ">
    </target>

    <target name="upgrade-ncm:with-dbinstall" description="Upgrades JBoss and Database"
        depends="
        upgrade:common:init,
        common:init,
        common:jboss:init,
        install:common:validation:pre-install,
        install:jboss:validation:pre-install,
        install:database:validation:pre-install,
        install:jboss:stop,
        install:database,
        upgrade-ncm:jboss,
        install:common:validation:post-install
        ">
    </target>

    <!-- Wrapper target to upgrade all container and install the database. Does not install or configure binaries -->
    <!-- Wrapper upgrade database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database. -->

    <target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
        depends="
        upgrade:database:init,
        common:init,
        install:database:prep,
        install:database:validation:pre-install
        ">
        <database-upgrade
            database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
            />
        <database-tag/>
    </target>

    <target name="bda-lite:upgrade:database:prep" description="Generates artifacts for db upgrade." unless="exclude.database"
        depends="
        common:init,
        install:database:prep">
    </target>

    <target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
        depends="
        upgrade:database:init,
        common:init,
        install:database:prep
        ">
        <database-tag/>
    </target>

    <target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
        depends="
        upgrade:database:init,
        common:init,
        install:database:prep
        ">
        <database-rollback/>
    </target>

     <target name="install:common:post" depends="common:init,install:post:jboss">
    </target>

    <target name="install:post:jboss" unless="exclude.jboss" depends="common:init">
        <if>
            <not>
                <equals arg1="${exclude.jboss.backup}" arg2="true"/>
            </not>
            <then>
                <property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.diff"/>
                <property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}"/>
                <property name="compare2.dir" location="${jboss.home}"/>
                <report-dir-diff
                    dir1="${compare1.dir}"
                    dir2="${compare2.dir}"
                    reportFile="${changelogFile}"
                    />
                <!-- Copy app server logs -->
                <mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
                <mkdir dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log"/>
                <!-- so the logs wont be included in the zip -->
                <move todir="${jboss.home}/server/${jboss.server.name}/log">
                    <fileset dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log">
                        <include name="*"/>
                    </fileset>
                </move>

                <!-- Compress backup and cleanup -->
                <mkdir dir="${backup.jboss.base.dir}/backup1"/>
                <zip destfile="${backup.jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip" basedir="${backup.jboss.base.dir}/backup" />
                <delete dir="${backup.jboss.base.dir}/backup"/>
            </then>
        </if>
    </target>

    <target name="upgrade:common:init" depends="upgrade:jboss:init" >
    </target>
    <target name="upgrade:jboss:init"
        depends="
        upgrade:jboss:init:prep,
        upgrade:jboss:readers:bda,
        upgrade:jboss:readers:custom
        ">
        <properties-print
            properties.list="${read.properties.list}"
            />
        <properties-exist
            properties.list="${read.properties.list}"
            />
        <properties-write
            properties.list="${read.properties.list}"
            />
    </target>
    <target name="upgrade:database:init"
        depends="
        upgrade:jboss:init:prep,
        upgrade:database:readers:bda,
        upgrade:database:readers:custom
        ">
        <!-- You need to either depend on jboss or tomcat so that you can read the db properties from it's configs.  BDA only has macros to read database properties from jboss. -->
    </target>
    <target name="upgrade:common:init:prep">
        <if>
            <not>
                <isset property="application.base.path"/>
            </not>
            <then>
                <!-- Set application.base.path based on platform -->
                <condition property="application.base.path" value="${application.base.path.linux}">
                    <or>
                        <os family="unix" />
                        <os family="mac" />
                    </or>
                </condition>

                <condition property="application.base.path" value="${application.base.path.windows}">
                    <os family="windows" />
                </condition>
                <echo message="application.base.path=${application.base.path}"/>
            </then>
        </if>
        <properties-print
            properties.list="application.base.path,jboss.home,jboss.server.name"
            />
        <var name="read.properties.list" value=""/>
        <property name="upgrade.running" value="true"/>
    </target>
    <target name="upgrade:jboss:init:prep" depends="upgrade:common:init:prep" >
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
        <if>
            <equals arg1="${jboss.ncicb-standard.port-config}" arg2="true"/>
            <then>
                <property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
            </then>
            <else>
                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
            </else>
        </if>
		<jboss-version/>
        <property name="upgrade.running" value="true"/>
        <!-- Upgrades always use port configs -->
        <property name="jboss.ncicb-standard.port-config" value="true"/>
        <available file="${jboss.home}" property="jboss.exists"/>
        <property name="read.jboss.home" value="${jboss.home}"/>

    </target>
    <target name="upgrade:jboss:readers:custom" >
        <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.host" -->
    </target>

    <target name="upgrade:database:readers:custom" >
        <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.host" -->
    </target>
    <target name="upgrade:database:readers:bda" depends="upgrade:jboss:init:prep" if="jboss.exists">

        <!-- Make sure the ${properties.file} has at least the following props -->
        <properties-exist
            properties.list="application.base.path,jboss.home,jboss.server.name"
            />
        <jboss-read-dbconfig
            jboss.home="${read.jboss.home}"
            jboss.ds-xml.file="caintegrator-mysql-ds.xml"
            />
    </target>
    <target name="upgrade:jboss:readers:bda" if="jboss.exists">
        <!-- Make sure the ${properties.file} has at least the following props -->
        <properties-exist
            properties.list="application.base.path,jboss.home,jboss.server.name"
            />
        <!-- Set these -->
        <osfamily property="os.family"/>
        <if>
            <not>
                <isset property="jboss.server.hostname"/>
            </not>
            <then>
		        <property name="jboss.server.hostname" value="localhost"/>
            </then>
        </if>
        <!-- Begin JBoss Readers -->
        <var name="read.properties.list" value=""/>
        <!-- Reader reqiures that you have only one data source defined in each *-ds.xml file -->
        <jboss-read-dbconfig jboss.ds-xml.file="caintegrator-mysql-ds.xml" />
        <jboss-read-ldapconfig />
        <jboss-read-bindings-file-location />
        <jboss51-read-ports />
        <jboss-read-ssoconfig />
        <!-- Setting this variable will cause install to copy it into place if using CM/DAC, not modified in NCM -->
        <var name="jboss.ssl.keystore.dir" value="${working.dir}/keys/jboss"/>
        <jboss-read-ssl
            copied.keystore.dir="${jboss.ssl.keystore.dir}"
            />
        <!-- No longer needed now reading all the ports
        <jboss-copy-bindings
            copied.jboss.server.bindingfile.dir="${working.dir}/copied-bindings"
            copied.jboss.bindings.file.property.name="copied.jboss.bindings.file"
            />
        # Setting this will cause install to copy this file into place if using CM/DAC, not modified in NCM
        <var name="jboss.server.binding.template.location" value="${working.dir}/copied-bindings/${copied.jboss.bindings.file}"/>
        -->
        <jboss-read-external-hostname
            />
        <!-- for tier installs, should be done first, since it is set first it will be the one used if it exists -->
        <jboss-read-java_opts
            jboss.bin.dir="${jboss.home}/server/${jboss.server.name}/bin"
            />
        <jboss-read-java_opts
            />
        <!-- will have to add code to install:post:jboss to copy this back if exists -->
        <property name="copied.jboss.log4j.dir" value="${working.dir}/copied-log4j"/>
        <jboss-copy-log4j
            copied.jboss.log4j.dir="${copied.jboss.log4j.dir}"
            jboss.log4j.location="${jboss.home}/server/${jboss.server.name}/conf/jboss-log4j.xml"
            />
        <!--
        <grid-read-index-url
            />
        <var name="jboss.grid.secure.dir" value="${working.dir}/keys/jboss"/>
        <jboss-read-grid-secure
            copied.keystore.dir="${jboss.grid.secure.dir}"
            />
        <grid-read-poc
            grid.service.name="Sample"
            />
        -->
    </target>
    <target name="upgrade:post:jboss">

        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-copy-log4j copied.jboss.log4j.dir="${copied.jboss.log4j.dir}" />
                <copy file="${copied.jboss.log4j.dir}/log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <copy file="${copied.jboss.log4j.dir}/jboss-log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
            </then>
        </if>


    </target>


</project>
