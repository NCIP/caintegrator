<?xml version="1.0" encoding="utf-8" ?>

<project name="build-caintegrator2" default="continuous-integration" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		Builds the application.
	</description>

	<!-- Property file related properties and tasks -->
	<property environment="env" />
	<!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
	<property file="local.properties" />
	<property file="project.properties" />
	<property name="properties.file" value="install.properties"/>
	<property name="upgrade.properties.file" value="upgrade.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>

	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />
	<!-- added for remote deployments since file is copied to root of install dir -->
	<basename property="properties.file.name" file="${properties.file}" />

	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>            
			<os family="unix" />    
			<os family="mac" />     
		</or>           
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>

	<!-- BDA standard structure -->
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
    <property name="third-party.dir" location="${software.dir}/third-party"/>
    <property name="bda.local.repo.dir" location="${local.repo.dir}" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${common.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}/ivy" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />
	<property name="working.dir" location="${target.dir}/working" />
    <property name="ivy.settings.file" location="${build.dir}/ivy-bda-settings.xml" />

	<!-- Used by dist:*:prep to determin list of files to use for incremental build process.-->
	<property name="db-install.src.dir" value="${common.dir}/resources/db-install" />
	<property name="db-upgrade.src.dir" value="${common.dir}/resources/db-upgrade" />

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<!-- Working directory passed to Ant tasks -->
    <property name="caintegrator2-war.base.dir" value="${software.dir}/caintegrator2-war" />
    <property name="genepattern-service-jar.base.dir" value="${software.dir}/genepattern-service-jar" />
    <property name="kaplan-meier-jar.base.dir" value="${software.dir}/kaplan-meier-jar" />
    <property name="cbs-to-heatmap-jar.base.dir" value="${software.dir}/cbs-to-heatmap-jar" />

	<!-- Build file names relative working dir above, if the software.dir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
    <property name="caintegrator2-war.build.file" value="build.xml" />
    <property name="genepattern-service-jar.build.file" value="build.xml" />
    <property name="kaplan-meier-jar.build.file" value="build.xml" />
    <property name="cbs-to-heatmap-jar.build.file" value="build.xml" />

	<!-- The target name that should be called from the sub-project build file -->
    <property name="caintegrator2-war.build.target" value="build" />
    <property name="genepattern-service-jar.build.target" value="build" />
    <property name="kaplan-meier-jar.build.target" value="build" />
    <property name="cbs-to-heatmap-jar.build.target" value="build" />

	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="dist.exploded.dir" value="${dist.dir}/exploded" />
    <property name="dist.artifacts.dir" value="${dist.dir}/artifacts" />
    <property name="caintegrator2-war.dist.dir" value="${dist.exploded.dir}/${caintegrator2-war.dist.relative.dir}" />
	<property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />
	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="db-install.dist.dir" value="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dist.dir" value="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />
    <property name="jboss-conf.dist.working.dir" value="${dist.exploded.dir}/working/${jboss-conf.dist.relative.dir}" />
    
	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}" />

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />

	<!-- Testing & static-analysis properties -->
	<property name="caintegrator2-war.java.dir" value="${caintegrator2-war.base.dir}/src" />

	<property name="caintegrator2-war.classes.dir" value="${caintegrator2-war.base.dir}/target/classes" />

	<!-- common directory to retrieve resources used by static-analysis tools -->
	<property name="common.dir" value="common" />

	<!-- retrive ivy.jar.files then retrieve bda files and librarires -->
	<condition property="commonlibrary.dir" value="">
		<or>
		<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="commonlibrary.dir" value="c:/">
		<os family="windows" />
	</condition>

	<condition property="local.cbiit-ivy-repo.dir" value="">
		<or>
		<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="local.cbiit-ivy-repo.dir" value="c:/">
		<os family="windows" />
	</condition>

	<property name="bda-download.file" value="bda-ivy-2.0.0-build.xml" />
        <ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
		<property name="commonlibrary.dir" location="${commonlibrary.dir}" />
		<property name="ivy.settings.file" value="cbiit-ivy-bda-settings.xml"/>
		<property name="target.dir" location="${target.dir}"/>
		<property name="local.cbiit-ivy-repo.dir" value="${local.cbiit-ivy-repo.dir}"/>
	</ant>

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
		    <include name="*.jar" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>

	<!-- Includes- include BDA marcos -->
	<echoproperties prefix="temp"/>
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />

	<!-- set some db variables -->

	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties />
		<diagnostics />
	</target>

	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${temp.dir}" />
        <ant inheritAll="false" inheritRefs="false" antfile="${caintegrator2-war.build.file}" target="clean" dir="${caintegrator2-war.base.dir}" />
        <ant inheritAll="false" inheritRefs="false" antfile="${genepattern-service-jar.build.file}" target="clean" dir="${genepattern-service-jar.base.dir}" />
        <ant inheritAll="false" inheritRefs="false" antfile="${kaplan-meier-jar.build.file}" target="clean" dir="${kaplan-meier-jar.base.dir}" />
	    <ant inheritAll="false" inheritRefs="false" antfile="${cbs-to-heatmap-jar.build.file}" target="clean" dir="${cbs-to-heatmap-jar.base.dir}" />
	</target>

	<target name="init">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${caintegrator2-war.dist.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
	</target>

	<target name="ivy:clean" description="Clean">
		<ant inheritAll="false" inheritRefs="false"
			antfile="bda-ivy-build.xml"
			target="ivy-cleancache"
		       	dir="${bda-download.dir}">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
			<property name="software.dir" value="${software.dir}" />
		</ant>
		<ant inheritAll="false" inheritRefs="false" antfile="${caintegrator2-war.build.file}" target="ivy:clean" dir="${caintegrator2-war.base.dir}" />
		<ant inheritAll="false" inheritRefs="false" antfile="${genepattern-service-jar.build.file}" target="ivy:clean" dir="${genepattern-service-jar.base.dir}" />
	    <ant inheritAll="false" inheritRefs="false" antfile="${kaplan-meier-jar.build.file}" target="ivy:clean" dir="${kaplan-meier-jar.base.dir}" />
	    <ant inheritAll="false" inheritRefs="false" antfile="${cbs-to-heatmap-jar.build.file}" target="ivy:clean" dir="${cbs-to-heatmap-jar.base.dir}" />
	</target>
    
    <target name="report:ivy:cai2" description="Runs ivy reports on all dependencies in the ivy defnintion file, also produces dependency diagrams" >
        <property name="ivy.dep.file" value="${caintegrator2-war.base.dir}/ivy-caintegrator2.xml" />
        <ivy:settings file="${common.dir}/ivysettings.xml" />
        <ivy:resolve refresh="true" />
        <property name="ivy.report.dir" value="${reports.dir}/ivy" />
        <delete dir="${ivy.report.dir}" />
        <mkdir dir="${ivy.report.dir}" />
        <ivy:report outputpattern="../target/reports/ivy/[organisation]-[module]-[conf].[ext]" dot="true" graph="false" />
        <util-dot-on-dir dot-file.dir="../target/reports/ivy" />
    </target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level dist.directory, used by distribution targets to make distributions" depends="
		clean,
		init,
        build:kaplan-meier.jar,
	    build:cbs-to-heatmap.jar,
        build:genepattern-service.jar,
        build:caintegrator2.war,
	    test:selenium:copy-tests
		" />

    <target name="build:caintegrator2.war" depends="init, build:genepattern-service.jar, build:kaplan-meier.jar, build:cbs-to-heatmap.jar">
        <ant inheritAll="false" inheritRefs="false" antfile="${caintegrator2-war.build.file}" target="${caintegrator2-war.build.target}" dir="${caintegrator2-war.base.dir}">
            <property name="caintegrator2.war" value="${caintegrator2-war.dist.dir}/caintegrator.war" />
        </ant>
    </target>

    <target name="build:genepattern-service.jar" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${genepattern-service-jar.build.file}" target="${genepattern-service-jar.build.target}" dir="${genepattern-service-jar.base.dir}">
            <property name="genepattern-service.jar" value="${genepattern-service-jar.base.dir}/target/genepattern-service.jar" />
        </ant>
    </target>

    <target name="build:kaplan-meier.jar" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${kaplan-meier-jar.build.file}" target="${kaplan-meier-jar.build.target}" dir="${kaplan-meier-jar.base.dir}">
            <property name="kaplan-meier.jar" value="${kaplan-meier-jar.base.dir}/target/kaplan-meier.jar" />
        </ant>
    </target>
    
    <target name="build:cbs-to-heatmap.jar" depends="init">
            <ant inheritAll="false" inheritRefs="false" antfile="${cbs-to-heatmap-jar.build.file}" target="${cbs-to-heatmap-jar.build.target}" dir="${cbs-to-heatmap-jar.base.dir}">
                <property name="cbs-to-heatmap.jar" value="${cbs-to-heatmap-jar.base.dir}/target/cbs-to-heatmap.jar" />
            </ant>
    </target>

	<!-- Produces all distributions: installer, upgrader and source -->
    <target name="dist" description="Makes all distributions: installer, gui installer, upgrader and source"
            depends="
            build:all,
            dist:installer,
            dist:upgrader,
            dist:src,
            dist:gui-installer
            "/>

	<target name="dist:src">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
	<target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository" depends="
		init,
		dist:tools:retrieve:jboss
		" />

	<!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
	    <copy todir="${download.dir}" file="${third-party.dir}/${jboss.binaries.file}"/>
	</target>
    
	<target name="dist:tools:retrieve:jboss-bindings"  description="Downloads JBOSS bindings filefrom binary repository and verifies checksum">
        <copy file="${third-party.dir}/${jboss5-bindings.file}" todir="${dist.exploded.dir}" />
	</target>

    <target name="dist:gui-installer" description="Makes Gui-Installer distribution">
        <delete>
            <fileset dir="${dist.dir}">
                <include name="*.jar" /> 
            </fileset>
        </delete>
        <gui-installer-prep product.name="${caintegrator2.install.name}" product.version="${caintegrator2.version}" /> 
        <ant inheritAll="false" inheritRefs="false" antfile="install.xml" target="build:installer" dir="${build.dir}/gui-installer">
            <property name="compile.jar.dir" value="${target.dir}/izpack-4.3" />
        </ant>
    </target>


	<!-- Copies install time resources into distribution tree -->
	<target name="dist:installer:prep" depends="dist:tools:retrieve,dist:tools:retrieve:jboss-bindings">
		<!-- Copy install related xml and properties files -->
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<dist-prep />
	</target>

	<!-- Creates the installer distribution used by automated or manual remote installations -->
	<target name="dist:installer" depends="dist:installer:prep">
		<delete file="${dist.dir}/${caintegrator2.install.zip.file}" />
		<delete file="${dist.exploded.dir}/upgrade.properties"/>
		<replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname,struts.devMode"
			optional.property.list="ldap.url,ldap.basedn"
			delete.property.list="exclude.jboss.backup"
			/>                      
		<zip destfile="${dist.dir}/${caintegrator2.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<!-- for DAC Upgrades-->
	<target name="dist:upgrader:prep" depends="build:all,dist:tools:retrieve,dist:tools:retrieve:jboss-bindings" description="Copies artifacts not generated by sub-project builds into the install distribution area">
        <copy todir="${db-install.dist.dir}" overwrite="true">
                <fileset dir="${db-install.src.dir}">
                        <include name="**/*" />
                </fileset>
        </copy>

		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<!-- For DAC upgrades -->
		<dist-prep
			copy.tools.flag="Y"
			default.target="upgrade"
			/>
	</target>

	<target name="dist:upgrader" depends="dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${caintegrator2.upgrade.zip.file}" />
		<!-- Set environment name to external -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>              
		</copy>         
		<delete file="${dist.exploded.dir}/install.properties"/>
		<replaceregexp file="${dist.exploded.dir}/upgrade.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />

		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/upgrade.properties"
			comment.property.list="application.base.path.windows,application.base.path.linux,jboss.relative.path,tomcat.relative.path"
			uncomment.property.list="application.base.path,tomcat.home,jboss.home"
			required.property.list="application.base.path,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname,struts.devMode"
			optional.property.list="ldap.url,ldap.basedn"
			delete.property.list="exclude.jboss.backup"
			/>
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />
		<zip destfile="${dist.dir}/${caintegrator2.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>
	<target name="dist:upgrade:tier:db" depends="dist:installer:prep">
		<delete file="${dist.dir}/${caintegrator2.install.name}_${caintegrator2.version}-db.zip"/>
		<zip destfile="${dist.dir}/${caintegrator2.install.name}_${caintegrator2.version}-db.zip">
			<zipfileset dir="${db-install.dist.dir}" prefix="${db-install.dist.relative.dir}" />
			<zipfileset dir="${db-upgrade.dist.dir}" prefix="${db-upgrade.dist.relative.dir}" />
			<zipfileset dir="${bda-utils.dir}" prefix="bda-utils"/>
			<zipfileset dir="${dist.exploded.dir}">
				<include name="build.xml" />
				<include name="install.properties" />
				<include name="properties.template" />
				<include name="project.properties" />
			</zipfileset>
		</zip>
	</target>

	<target name="dist:upgrade:tier:jboss" depends="dist:installer:prep">
		<delete file="${dist.dir}/${caintegrator2.install.name}_${caintegrator2.version}-jboss.zip"/>
		<zip destfile="${dist.dir}/${caintegrator2.install.name}_${caintegrator2.version}-jboss.zip">
			<zipfileset dir="${caintegrator2.dist.dir}" prefix="${caintegrator2.dist.relative.dir}"/>
			<zipfileset dir="${grid-sample.dist.dir}" prefix="${grid-sample.dist.relative.dir}"/>
			<zipfileset dir="${tools.dist.dir}" prefix="${tools.dist.relative.dir}">
				<include name="*jboss*"/>
			</zipfileset>
			<zipfileset dir="${common.dist.dir}" prefix="${common.dist.relative.dir}"/>
			<zipfileset dir="${bda-utils.dir}" prefix="bda-utils"/>
			<zipfileset dir="${dist.exploded.dir}">
				<include name="build.xml" />
				<include name="install.properties" />
				<include name="properties.template" />
				<include name="project.properties" />
			</zipfileset>
		</zip>
	</target>

	<target name="dist:upgrade:tier:tomcat" depends="dist:installer:prep">
		<delete file="${dist.dir}/${caintegrator2.install.name}_${caintegrator2.version}-tomcat.zip"/>
		<zip destfile="${dist.dir}/${caintegrator2.install.name}_${caintegrator2.version}-tomcat.zip">
			<zipfileset dir="${caintegrator2.dist.dir}" prefix="${caintegrator2.dist.relative.dir}"/>
			<zipfileset dir="${grid-sample.dist.dir}" prefix="${grid-sample.dist.relative.dir}"/>
			<zipfileset dir="${tools.dist.dir}" prefix="${tools.dist.relative.dir}">
				<include name="*tomcat*"/>
			</zipfileset>
			<zipfileset dir="${common.dist.dir}" prefix="${common.dist.relative.dir}"/>
			<zipfileset dir="${bda-utils.dir}" prefix="bda-utils"/>
			<zipfileset dir="${dist.exploded.dir}">
				<include name="build.xml" />
				<include name="install.properties" />
				<include name="properties.template" />
				<include name="project.properties" />
			</zipfileset>
		</zip>
	</target>
	<target name="dist:upgrade:tier"
		depends="
		dist:upgrade:tier:db,
		dist:upgrade:tier:tomcat,
		dist:upgrade:tier:jboss
		"/>

	<target name="deploy:local:install" depends="build:all,dist:installer:prep" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		<!--
		* Requires a database installation.
		* Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
		* If you want properties to be used at install time they must be included in a proeprties file.
		* Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install.
		* This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs.
		* It only supports using those properties files for now, so if you want to change install time properites edit these files.
		-->
		<deploy-local
			target.name="${install.target}"
			/>
	</target>

	<target name="deploy:local:upgrade" depends="build:all,dist:upgrader:prep" description="Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.">
		<!--
		* Requires a database installation.
		* Will use the target from install.xml specified in ${upgrade.target} (defaults to install unless passed in on command line).
		* Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		* This target will use differnt properties based on linux (linux-upgrade.properties) or windows (windows-upgrade.properties) installs.
		* It only supports using those properties files for now, so if you want to change install time properites edit these files.
		-->
		<deploy-local
			target.name="${upgrade.target}"
			properties.file="${upgrade.properties.file}"
			/>
	    
        <!-- Test basic http request to the application to confirm it is running -->
        <echo message="Checking if base url of application is running at http://${jboss.server.hostname}:${jboss.server.port}/caintegrator/login.action"/>
        <condition property="port.listening">
                <http url="http://${jboss.server.hostname}:${jboss.server.port}/caintegrator/login.action" />      
        </condition>
        <if>
                <isset property="port.listening"/>
                <then>
                        <echo message="Base url is responding as expected."/>
                </then>
                <else>
                        <echo message="Base url is not responding or giving an HTTP error code. You may experience problems using the application."/>
                </else>
        </if>	    
	</target>
    
    <target name="build-artifacts" depends="build:all,dist:upgrader:prep" description="" >
        <deploy-local 
            target.name="common:init" 
            override.properties="database.name=${database.name},database.user=${database.user},database.password=${database.password},database.port=${database.port},database.server=${database.server}"
            override.properties.delimiter=","
        />
        <property name="caintegrator2-war.dir.dist" location="${dist.exploded.dir}/${caintegrator2-war.dist.relative.dir}" />
        <property name="caintegrator2.jms.file" value="caintegrator2-jms-destinations-service.xml" />
        <property name="caintegrator2-war.ds.file" value="caintegrator2-mysql-ds.xml" />
        <property name="caintegrator2-war.mail.service.file" value="mail-service.xml" />
        <property name="caintegrator2-war.war.file" value="caintegrator.war" />
        <copy file="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" todir="${dist.artifacts.dir}" overwrite="true" />
        <copy file="${jboss-conf.dist.working.dir}/${caintegrator2-war.ds.file}" todir="${dist.artifacts.dir}" overwrite="true" />
        <copy file="${jboss-conf.dist.working.dir}/${caintegrator2.jms.file}" todir="${dist.artifacts.dir}/jms" overwrite="true" />
        <copy file="${jboss-conf.dist.working.dir}/${caintegrator2-war.mail.service.file}" todir="${dist.artifacts.dir}" overwrite="true" />
    </target>
    
    <target name="build-db-artifacts:prep" description="Prepares dir with sql and xml files for use by liquidbase"
        depends="dist:upgrader:prep" >
        <deploy-local
           target.name="bda-lite:upgrade:database:prep"
           override.properties="database.name=${database.name},database.user=${database.user},database.password=${database.password},database.port=${database.port},database.server=${database.server}"
           override.properties.delimiter=","
           />
        <copy file="${bda-utils.dir}/mysql-connector-java-5.1.13.jar" todir="${db-upgrade.dist.dir}" overwrite="true" />
        <copy file="${bda-utils.dir}/liquibase-core-1.9.3.jar" todir="${db-upgrade.dist.dir}" overwrite="true" />
        <copy file="${build.dir}/ahp3-db-upgrade.xml" todir="${db-upgrade.dist.dir}" overwrite="true" />
        <zip destfile="${dist.dir}/db-upgrade.zip" basedir="${db-upgrade.dist.dir}" />   
    </target>

	<!-- Install the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into -->
	<target name="deploy:remote:install" depends="
		build:all,
		dist:installer
		">
		<deploy-files dist.file="${caintegrator2.install.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
        
        <!-- Test basic http request to the application to confirm it is running -->
        <echo message="Checking if base url of application is running at http://${jboss.server.hostname}:${jboss.server.port}/caintegrator/login.action"/>
        <condition property="port.listening">
                <http url="http://${jboss.server.hostname}:${jboss.server.port}/caintegrator/login.action" />      
        </condition>
        <if>
                <isset property="port.listening"/>
                <then>
                        <echo message="Base url is responding as expected."/>
                </then>
                <else>
                        <echo message="Base url is not responding or giving an HTTP error code. You may experience problems using the application."/>
                </else>
        </if>
        
	</target>

	<!-- Upgrades the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point upgrader to correct enviornment to upgrade -->
	<target name="deploy:remote:upgrade" depends="
		build:all,
		dist:upgrader
		">
		<deploy-files dist.file="${caintegrator2.upgrade.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
        
        <!-- Test basic http request to the application to confirm it is running -->
        <echo message="Checking if base url of application is running at http://${jboss.server.hostname}:${jboss.server.port}/caintegrator/login.action"/>
        <condition property="port.listening">
                <http url="http://${jboss.server.hostname}:${jboss.server.port}/caintegrator/login.action" />      
        </condition>
        <if>
                <isset property="port.listening"/>
                <then>
                        <echo message="Base url is responding as expected."/>
                </then>
                <else>
                        <echo message="Base url is not responding or giving an HTTP error code. You may experience problems using the application."/>
                </else>
        </if>
	</target>

	<target name="usage" description="Explains how to use this build script">
		<echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
	</target>

	<!-- Wrapper test target, call appropriate test for sub-projects -->

	<target name="test:all" description="Builds all the sub projects, putting artifacts in the project level dist.directory, used by distribution targets to make distributions" 
	    depends="clean,init,test:unit:all" />

	<target name="test:unit:all" description="calls sub-project test:unit targets"
		depends="test:unit:caintegrator2-war"/>

	<target name="test:unit:caintegrator2-war" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${caintegrator2-war.build.file}" target="test:unit" dir="${caintegrator2-war.base.dir}"/>
	</target>

    <target name="test:integration:caintegrator2-war" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${caintegrator2-war.build.file}" 
            target="test:integration:from-master" dir="${caintegrator2-war.base.dir}" />
    </target>

	<target name="static-analysis:all" description="calls all sub-project static-analysis targets"
		depends="static-analysis:caintegrator2-war"/>

	<target name="static-analysis:caintegrator2-war" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${caintegrator2-war.build.file}" target="static-analysis"
		    dir="${caintegrator2-war.base.dir}" >
		</ant>
	</target>  
	
	<target name="continuous-integration" description="calls wrapper targets for continuous integration build"
		depends="build:all,static-analysis:all,test:unit:all"/>
	
    <property name="selenium.test.src.dir" value="${software.dir}/caintegrator2-war/test/acceptance/selenium"/>
    <property name="selenium.test.target.dir" value="${software.dir}/caintegrator2-war/target/selenium"/>
    <property name="selenium.test.suite" value="${selenium.test.target.dir}/cai2_test_suite_functional_tests"/>

    <target name="test:selenium:copy-tests">
        <property name="caintegrator2-war.test.resources.dir" value="${caintegrator2-war.base.dir}/test/resources" />
        <pathconvert property="selenium.test.resources.dir.noseperator">
            <path location="${caintegrator2-war.test.resources.dir}" />
        </pathconvert>
        <property name="selenium.test.resources.dir" value="${selenium.test.resources.dir.noseperator}${file.separator}" />
        <pathconvert property="selenium.test.affymetrix.design.dir.noseperator">
            <path location="${caintegrator2-war.test.resources.dir}/arraydesign/affymetrix" />
        </pathconvert>
        <property name="selenium.test.affymetrix.design.dir" value="${selenium.test.affymetrix.design.dir.noseperator}${file.separator}" />
        <pathconvert property="selenium.test.agilent.design.dir.noseperator">
            <path location="${caintegrator2-war.test.resources.dir}/arraydesign/agilent" />
        </pathconvert>
        <property name="selenium.test.agilent.design.dir" value="${selenium.test.agilent.design.dir.noseperator}${file.separator}" />
        <copy todir="${selenium.test.target.dir}" overwrite="true">
            <fileset dir="${selenium.test.src.dir}" />
            <filterset begintoken="$${" endtoken="}">
                <filter token="selenium.test.resources.dir" value="${selenium.test.resources.dir}" />
                <filter token="selenium.test.affymetrix.design.dir" value="${selenium.test.affymetrix.design.dir}" />
                <filter token="selenium.test.agilent.design.dir" value="${selenium.test.agilent.design.dir}" />
                <filter token="jboss.server.port" value="${jboss.server.port}" />
                <filter token="jboss.server.hostname" value="${jboss.server.hostname}" />
            </filterset>
        </copy>
    </target>

	<target name="database:prep" description="Copies db files with filtering">
		<switch value="${database.type}">
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.1.13.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case> 
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>
		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path> 
		<echoproperties prefix="database"/>
		<copy todir="${working.dir}/" filtering="true"  overwrite="true">
			<fileset dir="${db.src.dir}">
				<include name="**/db-upgrade/**/*"/>
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
				<filter token="db-upgrade.run.dir" value="${working.dir}/db-upgrade/${database.type}"/>
			</filterset>
		</copy>
	</target>
</project>
