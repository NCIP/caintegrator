<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/caintegrator2-war/trunk/software/install.xml $
-->
<project name="caintegrator-cacore-caintegrator2-war-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		TBD
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="project.properties"/>
	<property file="local.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>

	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	<!-- Generic properties -->
	<property name="project.name" value="caintegrator2"/>
	<property name="env.name" value="local"/>
	<property name="log.dir" location="${basedir}/logs" />
	<property name="working.dir" location="${basedir}/working" />
	<property name="temp.dir" location="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" location="bda-utils" />
	<property name="tools.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" location="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" location="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" location="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" location="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" location="${working.dir}/${db-install.dist.relative.dir}" />
    <property name="db-upgrade.src.dir" location="${basedir}/${db-upgrade.dist.relative.dir}/${database.type}" />
	<property name="db-upgrade.dir.dest" location="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dir.src" location="${basedir}/${jboss-conf.dist.relative.dir}" />
	<property name="jboss-conf.dir.dest" location="${working.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- deployment XML files and WAR -->
	<property name="caintegrator2-war.dir.dist" location="${basedir}/${caintegrator2-war.dist.relative.dir}" />
    <property name="caintegrator2.jms.file" value="caintegrator2-jms-destinations-service.xml" />
	<property name="caintegrator2-war.ds.file" value="caintegrator2-mysql-ds.xml" />
	<property name="caintegrator2-war.war.file" value="caintegrator2.war" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<mkdir dir="${working.dir}" />
	<delete dir="${working.dir}"/>
	<mkdir dir="${working.dir}" />

	<!-- Start logging moved out of target so all targets are logged -->
	<property name="install-logs.dir" location="${application.base.path}/change-logs"/>
	<!--<property name="install-logs.dir" location="${log.dir}"/>-->
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

	
	<target name="init:common">
		<property name="application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/caintegrator2"/>
		<!-- Conditionals -->
		<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
		<!-- caintegrator2-war can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<switch value="${database.type}">
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
				<property name="is.mysql" value="true"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>
		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path>

	
		<property name="properties.template.file" value="${basedir}/properties.template" />

		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
		</filterset>

		<!-- Added to convert location to file and path -->
		<basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
		<dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
		<basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
		<dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
		<basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
	
	</target>

	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem" depends="init:install,init:common,install:clean:jboss">
	</target>

	<target name="install:clean:jboss" unless="exclude.jboss" depends="init:install,init:common">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>

		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<!-- Jboss backup, do not compress until install is finished -->
				<property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss"/>

				<!-- So these directories won't be included in the backup, they are not needed to use jboss --> 
				<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
				<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

				<backup-dir
					src.dir="${jboss.home}"
					backup.base.dir="${backup.jboss.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${jboss.home}"/>
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install" depends="init:install,init:common">
		<math result="jboss.ssl.port" operand1="${jboss.server.port}" operation="+" operand2="363" datatype="int"/>
		<!-- Default to false, properties can override -->
		<property name="grid.secure.enable" value="false"/> 
		<property name="jboss.ssl.enable" value="false"/> 

		<mkdir dir="${resource.dir.temp}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
	</target>

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="init:install,init:common">
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<echo  message="Checking if database properties exist: ${db.prop.list}"/>
		<properties-exist properties.list="${db.prop.list}"/>
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		init:install,
		init:common,
		install:database:prep
		">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="mysql">
				<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/>
			</case>
		</switch>
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
    </target>
    
    <target name="upgrade:initdb" description="Runs database initialization scripts." unless="exclude.database">
        <!-- Run script to initialize application properties table -->
        <mkdir dir="${db-install.dir.dest}/${database.type}" />
        <copy todir="${db-install.dir.dest}/${database.type}" overwrite="true">
            <fileset dir="${db-upgrade.src.dir}" includes="*.sql" />
        </copy>
        <!-- "replace" command for grid.index.url -->
        <replace file="${db-install.dir.dest}/${database.type}/db-init-application-properties.sql"
            token="@grid.index.url@" value="${grid.index.url}" />
        <database-install
            db.install.create.file.list="db-init-application-properties.sql"
            />
    </target>    


	<target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss" depends="init:install,init:common">
		<jboss-install-binaries
			/>
		<jboss-nci-customizations
			/>
	</target>

	<target name="install:jboss:caintegrator2-war" description="Deploy caintegrator2-war caintegrator2-war.ear, caintegrator2-war-api.war and common libraries" unless="exclude.jboss" depends="init:install,init:common">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
        <move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}" failonerror="false"/>
	    
		<copy file="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		
		<!-- Replace this with file from ivy when project is ivy'fied -->
	</target>

	<target name="install:jboss:caintegrator2-war:configure" description="Configure caintegrator2-war application" unless="exclude.jboss" depends="init:install,init:common">
        <copy file="${jboss-conf.dir.dest}/${caintegrator2-war.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
        <copy file="${jboss-conf.dir.dest}/${caintegrator2.jms.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy/jms" overwrite="true" />
	</target>

	<!-- Configure MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target name="-install:jboss:configure:jbossmq-dest" unless="exclude.jboss" depends="init:install,init:common">
		<!--
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
		-->
	</target>

	<target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss"  depends="init:install,init:common">
		<!--
		<echo message="Configuring Log4J"/>

		<property name="log4j.file.name" value="log4j.xml"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.pre"/>

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			byline="true"
			match="^(&lt;!DOCTYPE.*)"
			replace="&lt;!\-\-\1\-\-&gt;"
			/>

		<xmltask source="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			dest="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}">
			<xmlcatalog refid="installer.catalog"/>
			<remove path="/log4j:configuration/appender[@name='TestAppender']"/>
			<insert path="/log4j:configuration">
				<![CDATA[
				<appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
					<errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
					<param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
					<param name="Append" value="false"/>
					<param name="MaxFileSize" value="${log4j.maxFileSize}"/>
					<param name="MaxBackupIndex" value="${log4j.maxDays}"/>

					<layout class="org.apache.log4j.PatternLayout"> 
						<param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
					</layout>           
				</appender>
				]]>
			</insert>
			<remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
			<insert path="/log4j:configuration">
				<![CDATA[
				<category name="org.nih.nci">
					<priority value="${log4j.level}"/>
				</category>
				]]>
			</insert>
		</xmltask>
		<validate-log4j
			log4j.file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			/>                                                      

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			byline="true"
			match="^&lt;!\-\-(&lt;!DOCTYPE.*)\-\-&gt;"
			replace="\1"
			/>
		-->
	</target>
	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
		depends="
		init:install,
		init:common,
		install:jboss:configure:log4j   
		">
		<!-- Calls the following macros
		jboss-bindings - configures ports for jboss
		jboss-login-config - sets up authentication
		secure-jboss-console - adds password to jboss console apps
		jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown 
		appserver-ssl-configure -  enables ssl
		appserver-configure-external-hostname - configures jboss for use through a reverse proxy 
		grid-secure-configure-connector - configures secure grid
		-->
		<!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
		<jboss-configure
			/>
	</target>


	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" if="jboss.exists" unless="exclude.jboss" depends="init:install,init:common">
		<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
		<jboss-stop-jboss />
	</target>
	<target name="install:jboss:start"  unless="exclude.jboss" depends="init:install,init:common">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install" depends="init:install,init:common">
		<validate-pre-install 
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			database.version="${mysql.minimum.version}"
			/>      
	</target>
	<target name="install:validation:pre-install:ports" depends="init:install,init:common">
		<validate-ports-preinstall />
	</target>
	<target name="install:validation:post-install" depends="init:install,init:common">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" unless="exclude.jboss"
		depends="
		init:install,
		init:common,
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean:jboss,
		install:init,
		install:jboss:binaries,
		install:jboss:caintegrator2-war:re-configure,
		install:jboss:caintegrator2-war,
		install:jboss:caintegrator2-war:configure,
		install:jboss:configure,
		install:post:jboss,
		install:jboss:start
		" />

	<!-- Wrapper target to deploy all containers to one server -->
	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		init:install,
		init:common,
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:database,
		install:jboss,
		install:post,
		install:jboss:start,
		install:validation:post-install
		"/>

	<!-- Fixes hibernate dialect and other configurations in code generated at build time.  This is requred because the properties/options selected at build time can be different than those used at install time. -->
	<target name="install:jboss:caintegrator2-war:re-configure" unless="exclude.jboss">
		<!--
		<delete dir="${working.dir}/caintegrator2-war"/>
		<unzip src="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" dest="${working.dir}/caintegrator2-war"/>

		<replaceregexp file="${working.dir}/caintegrator2-war/WEB-INF/classes/hibernate.cfg.xml"
			match="(connection.driver_class&quot;&lt;).*(&gt;)"
			replace="\1${database.driver}\2"
			flags="sg"/>
		<replaceregexp file="${working.dir}/caintegrator2-war/WEB-INF/classes/hibernate.cfg.xml"
			match="(connection.url&quot;&lt;).*(&gt;)"
			replace="\1${database.url}\2"
			flags="sg"/>
		<replaceregexp file="${working.dir}/caintegrator2-war/WEB-INF/classes/hibernate.cfg.xml"
			match="(connection.username&quot;&lt;).*(&gt;)"
			replace="\1${database.user}\2"
			flags="sg"/>
		<replaceregexp file="${working.dir}/caintegrator2-war/WEB-INF/classes/hibernate.cfg.xml"
			match="(connection.password&quot;&lt;).*(&gt;)"
			replace="\1${database.password}\2"
			flags="sg"/>
		<replaceregexp file="${working.dir}/caintegrator2-war/WEB-INF/classes/hibernate.cfg.xml"
			match="(dialect&quot;&lt;).*(&gt;)"
			replace="\1${database.dialect}\2"
			flags="sg"/>

		<move file="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" tofile="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}.orig"/>
		<war destfile="${caintegrator2-war.dir.dist}/${caintegrator2-war.war.file}" compress="false" webxml="${working.dir}/caintegrator2-war/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/caintegrator2-war">
				<include name="*/**" />
			</fileset>
		</war>
		-->
	</target>

	<!-- Generic targets to call appropriate upgrade path targets, just change the depends to use alternate ugprade path -->
	<target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss" depends="init:upgrade:jboss,init:common,upgrade-dac:jboss">
	</target>

	<target name="upgrade" description="Upgrades JBoss and Database" depends="init:upgrade,init:common,upgrade-dac">
	</target>

	<target name="upgrade-with-dbinstall" description="Upgrades JBoss and Database" depends="init:upgrade,init:common,upgrade-dac:with-dbinstall">
	</target>

	<!-- Upgrade with Disposable Application Conttainer (DAC) -->
	<target name="upgrade-dac:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		init:upgrade:jboss,
		init:common,
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean:jboss,
		install:init,
		install:jboss:binaries,
		install:jboss:configure,
		install:jboss:caintegrator2-war:re-configure,
		install:jboss:caintegrator2-war,
		install:jboss:caintegrator2-war:configure,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start
		">
	</target>

	<target name="upgrade-dac" description="Upgrades JBoss and Database"
		depends="
		init:upgrade,
		init:common,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		upgrade:database,
		upgrade:jboss,
		install:validation:post-install
		">
	</target>

	<target name="upgrade-dac:with-dbinstall" description="Upgrades JBoss and Database"
		depends="       
		init:upgrade,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		install:init,   
		install:database,
		upgrade:jboss,  
		install:validation:post-install
		">              
	</target>
	<!-- Upgrade with Container Modification (CM) -->
	<target name="upgrade-cm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="       
		init:upgrade:jboss,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:init,   
		install:jboss:configure,
		install:jboss:caintegrator2-war:re-configure,
		install:jboss:caintegrator2-war,
		install:jboss:caintegrator2-war:configure,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start
		">              
	</target>

	<target name="upgrade-cm" description="Upgrades JBoss and Database"
		depends="       
		init:upgrade,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		install:init,   
		upgrade:database,
		upgrade:jboss,  
		install:validation:post-install
		">              
	</target>

	<target name="upgrade-cm:with-dbinstall" description="Upgrades JBoss and Database"
		depends="       
		init:upgrade,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		install:init,   
		install:database,
		upgrade:jboss,  
		install:validation:post-install
		">              
	</target>
	<!-- Upgrade with No Container Modification (NCM) -->
	<target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="       
		init:upgrade:jboss,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:init,   
		install:jboss:caintegrator2-war:re-configure,
		install:jboss:caintegrator2-war,
		install:jboss:caintegrator2-war:configure,
		install:post:jboss,
		install:jboss:start
		">              
	</target>

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="       
		init:upgrade,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		upgrade:database,
		upgrade:jboss,  
		install:validation:post-install
		">              
	</target>

	<target name="upgrade-ncm:with-dbinstall" description="Upgrades JBoss and Database"
		depends="       
		init:upgrade,   
		init:common,    
		install:validation:pre-install,
		install:jboss:stop,
		install:init,   
		install:database,
		upgrade:jboss,  
		install:validation:post-install
		">              
	</target>

    <!-- Wrapper target to upgrade all container and install the database. Does not install or configure binaries -->
    <target name="upgrade:newdb" description="Deploys application and reinstalls database" 
        depends="
	init:upgrade,   
	init:common,    
        install:validation:pre-install,
        install:jboss:stop,
        install:init,
        install:database,
        upgrade:jboss,
        install:validation:post-install
        "/>        

	<!-- Wrapper upgrade database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database. -->

	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		init:upgrade,   
		init:common,    
		install:init,
		install:database:prep
		">
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>

	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		init:upgrade,   
		init:common,    
		install:init,
		install:database:prep
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		init:upgrade,   
		init:common,    
		install:init,
		install:database:prep
		">
		<database-rollback/>
	</target>

	<target name="install:post" depends="init:install,init:common,install:post:jboss">
	</target>               
	                                
	<target name="install:post:jboss" unless="exclude.jboss" depends="init:install,init:common">
		<if>                    
			<not>                           
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>                          
				<property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.diff"/>
				<property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}"/>
				<property name="compare2.dir" location="${jboss.home}"/>
				<report-dir-diff                        
					dir1="${compare1.dir}"                  
					dir2="${compare2.dir}"          
					reportFile="${changelogFile}"   
					/>                              
				<!-- Copy app server logs -->
				<mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
				<mkdir dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log"/>
				<!-- so the logs wont be included in the zip --> 
				<move todir="${jboss.home}/server/${jboss.server.name}/log">
					<fileset dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log">
						<include name="*"/>                     
					</fileset>                      
				</move>
				                                
				<!-- Compress backup and cleanup -->
				<mkdir dir="${backup.jboss.base.dir}/backup1"/>
				<zip destfile="${backup.jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip" basedir="${backup.jboss.base.dir}/backup" />
				<delete dir="${backup.jboss.base.dir}/backup"/>
			</then>                 
		</if>           
	</target>
	<target name="init:install" unless="upgrade.running">
		<property name="install.running" value="true"/>
		<!-- Set application.base.path based on platform --> 
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows" />
		</condition>
		<echo message="application.base.path=${application.base.path}"/>
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>

		<!-- determine if port configurations or port lists are being called -->
		<if>
			<isset property="jboss.ncicb-standard.port-config"/>
			<then>
				<!-- Read some port properties from standard bindings file --> 
				<echo message="Using JBoss NCICB Standard port configurations"/> 
				<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
				<jboss-read-ports
					jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
					/>
				<echo message="http -${jboss.server.port} "/>
				<echo message="http -${jboss.server.jndi.port} "/>
				<properties-exist
					properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"
					/>
				<!-- Make sure there are not unexpanded tokens and that the jboss.server.ports.name is a configuration in the bindings file. -->
				<jboss-bindings-validate
					jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
					/>

			</then>
			<else>
				<!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
				<echo message="Using custom JBoss port configurations"/>
				<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
				<properties-exist
					properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.ejbinvoker.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jms.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.remoting.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port"
					/>
			</else>
		</if>
	</target>
	<target name="init:upgrade" depends="init:upgrade:jboss" unless="install.running">
	</target>
	<target name="init:upgrade:jboss" unless="install.running"
		depends="
		init:upgrade:prep,
		init:readers:bda:jboss,
		init:readers:custom:jboss
		">
	</target>

	<target name="init:upgrade:prep">

		<properties-print
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>                      
		<if>            
			<not>                   
				<isset property="application.base.path"/>
			</not>                  
			<then>                  
				<!-- Set application.base.path based on platform -->
				<condition property="application.base.path" value="${application.base.path.linux}">
					<or>                                    
						<os family="unix" />                            
						<os family="mac" />                             
					</or>                                   
				</condition>                    

				<condition property="application.base.path" value="${application.base.path.windows}">
					<os family="windows" />                 
				</condition>                    
				<echo message="application.base.path=${application.base.path}"/>
				<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
			</then>                 
		</if>           

		<if>            
			<equals arg1="${jboss.ncicb-standard.port-config}" arg2="true"/>
			<then>                  
				<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
			</then>                 
			<else>                  
				<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
			</else>                 
		</if>           

		<property name="upgrade.running" value="true"/>
		<!-- Upgrades always use port configs -->
		<property name="jboss.ncicb-standard.port-config" value="true"/>
		<available file="${jboss.home}" property="jboss.exists"/>
	</target>

	<target name="init:readers:custom:jboss" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="init:readers:bda:jboss" if="jboss.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist       
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>              
		<!-- Set these -->
		<osfamily property="os.family"/>
		<if>                    
			<or>                            
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>                   
			<then>                          
				<property name="jboss.server.hostname" value="${env.HOSTNAME}"/>
			</then>         
		</if>           
		<if>                    
			<equals arg1="${os.family}" arg2="windows"/>
			<then>                          
				<property name="jboss.server.hostname" value="${env.COMPUTERNAME}"/>
			</then>         
		</if>           
		<!-- Begin JBoss Readers -->
		<var name="read.properties.list" value=""/>
		<!-- Reader reqiures that you have only one data source defined in each *-ds.xml file -->
		<jboss-read-dbconfig    
			jboss.ds-xml.file="caintegrator2-mysql-ds.xml"
			/>              
		<jboss-read-ldapconfig  
			/>              
		<jboss-read-bindings-file-location
			/>              
		<jboss-read-ports       
			/>              
		<!-- Setting this variable will cause install to copy it into place if using CM/DAC, not modified in NCM -->
		<var name="jboss.ssl.keystore.dir" value="${working.dir}/keys/jboss"/>
		<jboss-read-ssl         
			copied.keystore.dir="${jboss.ssl.keystore.dir}"
			/>              
		<!-- No longer needed now reading all the ports
		<jboss-copy-bindings    
			copied.jboss.server.bindingfile.dir="${working.dir}/copied-bindings"
			copied.jboss.bindings.file.property.name="copied.jboss.bindings.file"
			/>              
		# Setting this will cause install to copy this file into place if using CM/DAC, not modified in NCM 
		<var name="jboss.server.binding.template.location" value="${working.dir}/copied-bindings/${copied.jboss.bindings.file}"/>
		-->             
		<jboss-read-external-hostname
			/>                      
		<!-- for tier installs, should be done first, since it is set first it will be the one used if it exists -->
		<jboss-read-java_opts
			jboss.bin.dir="${jboss.home}/server/${jboss.server.name}/bin"
			/>                      
		<jboss-read-java_opts
			/>                      
		<!-- will have to add code to install:post:jboss to copy this back if exists -->
		<property name="copied.jboss.log4j.dir" value="${working.dir}/copied-log4j"/>
		<jboss-copy-log4j
			copied.jboss.log4j.dir="${copied.jboss.log4j.dir}"
			/>                      
		<grid-read-index-url
			/>                      
		<var name="jboss.grid.secure.dir" value="${working.dir}/keys/jboss"/>
		<jboss-read-grid-secure
			copied.keystore.dir="${jboss.grid.secure.dir}"
			/>                      
		<!-- will have to add code to install:post:jboss to copy this back if exists -->
		<!-- no longer needed 
		<property name="copied.jboss.service-metadata.dir" value="${working.dir}/jboss-grid"/>
		<grid-copy-service-metadata
			copied.service-metadata.dir="${copied.service-metadata.dir}"
			/>                      
		-->             
		<grid-read-poc  
			grid.service.name="Sample"
			/>                      
	</target>
	<target name="upgrade:post:jboss">
		<copy file="${copied.jboss.log4j.dir}/log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
	</target>


</project>
