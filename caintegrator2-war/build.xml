<!-- *********************************************************************** -->
<!-- ** PROJECT:   caIntegrator 2                                         ** -->
<!-- *********************************************************************** -->

<project name="caintegrator2" default="continuous-integration" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns="antlib:org.apache.tools.ant"
	xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
	>

    <!-- ******************************************************************* -->
    <!-- ** PROPERTIES / PATHS                                            ** -->
    <!-- ******************************************************************* -->

    <!-- Main -->
    <property name="root.dir" location="${basedir}/../.." />
    <property name="docs.dir" location="${root.dir}/docs" />
    <property name="software.dir" location="${root.dir}/software" />
    <property name="build.dir" location="${software.dir}/caintegrator2-war" />
    <property name="lib.dir" location="${software.dir}/lib" />
    <property name="ncia.lib.dir" location="${lib.dir}/ncia-lib" />
    <property name="build.lib.dir" location="${software.dir}/lib" />
    <property name="resource.dir" location="${software.dir}/common" />
    <property name="target.dir" location="${build.dir}/target" />
    <property name="site.dir" location="${software.dir}/reports" />
	<property name="common.dir" value="${software.dir}/common"/>

    <!-- Main caCORE properties; required for taskdefs -->
    <property name="caintegrator2-cacore.dir" location="${software.dir}/caintegrator-cacore" />
    <property name="caintegrator2-cacore.system.dir" location="${caintegrator2-cacore.dir}/system" />
    <property name="caintegrator2-cacore.system.dist.dir" location="${caintegrator2-cacore.system.dir}/dist" />
    <property name="caintegrator2-cacore.system.lib.dir" location="${caintegrator2-cacore.system.dir}/lib" />

    <!-- Environment properties -->
    <property environment="env" />
    <property file="${build.dir}/local.properties" />
    <property file="${build.dir}/default.properties" />
    <property file="${software.dir}/project.properties"/>
    <property file="${envpropertyfile}" />

    <!-- Libraries -->
    <property name="junit.jar" location="${lib.dir}/junit-4.4.jar" />

    <!-- Paths -->
    <path id="test.dependencies.path">
        <pathelement location="${junit.jar}" />
    </path>

    <!-- Filtersets -->
    <filterset id="caintegrator2.filterset" onmissingfiltersfile="warn">
        <filtersfile file="${build.dir}/local.properties" />
        <filtersfile file="${build.dir}/default.properties" />
        <filtersfile file="${envpropertyfile}" />
    </filterset>

    <!-- ******************************************************************* -->
    <!-- ** BUILD / TASKDEFS                                              ** -->
    <!-- ******************************************************************* -->
    
    <!-- ant-contrib -->
    <property name="ant-contrib.jar" location="${lib.dir}/ant-contrib-1.0b3.jar" />
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant-contrib.jar}" />

    <!-- Checkstyle -->
    <property name="checkstyle.jar" location="${lib.dir}/checkstyle-all-4.4.jar" />
    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.jar}" />
    <property name="checkstyle.config" location="${resource.dir}/checkstyle/caintegrator2_checks.xml" />

    <!-- Hibernate -->
    <path id="hibernatetool.classpath">
        <fileset dir="${caintegrator2-cacore.system.lib.dir}">
            <include name="antlr-2.7.6.jar" />
            <include name="asm.jar" />
            <include name="c3p0-0.9.0.jar" />
            <include name="cglib-2.1.3.jar" />
            <include name="commons-collections-3.2.jar" />
            <include name="ehcache-1.2.2.jar" />
            <include name="hibernate3.jar" />
            <include name="freemarker-2.3.4.jar" />
            <include name="pmd-4.2.1.jar" />
            <include name="dom4j-1.4.jar" />
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="commons-logging-1.0.4.jar" />
            <include name="commons-logging-1.0.4.jar" />
            <include name="ejb3-persistence.jar" />
            <include name="hibernate-annotations.jar" />
            <include name="hibernate-commons-annotations.jar" />
            <include name="hibernate-tools-3.2.2.beta1.jar" />
            <include name="mysql-connector-java-5.0.5-bin.jar" />
        </fileset>
    </path>
    <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="hibernatetool.classpath" />

    <!-- PMD -->
    <path id="pmd.classpath">
        <fileset dir="${lib.dir}">
            <include name="asm-3.1.jar" />
            <include name="jaxen-1.1.1.jar" />
            <include name="pmd-4.2.1.jar" />
        </fileset>
    </path>
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />

    <!-- Ivy -->
    <property name="ivy.jar" location="${build.lib.dir}/ivy-2.0.0-beta2.jar" />
    <property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar"/>

    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy-caintegrator2.xml" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

    <property name="bda-utils.dir" location="${build.dir}/bda-utils" />

    <mkdir dir="${build.lib.dir}" />
    <ant inheritAll="false" inheritRefs="false" dir="${software.dir}"
	    antfile="bda-ivy-build.xml" target="retrieve-bda">
        <property name="bda-utils.dir" location="${bda-utils.dir}" />
        <property name="lib.dir" location="${build.lib.dir}" />
	<property name="bda.local.repo.dir" location="${software.dir}/../../bda-local-ivy-repo" />
    </ant>

    <import file="${bda-utils.dir}/bda-build-utils-0.2.0.xml" />

    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />

	<target name="init:ivy">
		<mkdir dir="${local.repo.dir}"/>
		<property name="ivy.dep.file" value="${ivy.def.file}"/>
		<ivy:settings file="${ivy.settings.file}" />
	</target>

    <!-- Cobertura -->
    <property name="cobertura.dir" location="${site.dir}/cobertura" />
    <property name="cobertura.file" location="${cobertura.dir}/cobertura.ser" />
    <property name="cobertura-functional.file" location="${cobertura.dir}/cobertura-functional.ser" />
    <property name="cobertura-merged.file" location="${cobertura.dir}/cobertura-merged.ser" />

    <path id="cobertura.classpath">
        <fileset dir="${lib.dir}">
            <include name="cobertura.jar" />
            <include name="asm-2.2.1.jar" />
            <include name="asm-tree-2.2.1.jar" />
            <include name="jakarta-oro-2.0.8.jar" />
            <include name="log4j-1.2.9.jar" />
        </fileset>
    </path>

    <!-- Build Output Site -->
    <target name="clean:site">
        <delete dir="${site.dir}" />
    </target>


    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <!-- ******************************************************************* -->
    <!-- ** MAIN TARGETS                                                  ** -->
    <!-- ******************************************************************* -->

    <target name="continuous-integration" 
        depends="clean,init:ivy,build,check,test:unit" 
        description="Cleans, builds, checks and tests the codebase. This should be run prior to every commit." />

    <target name="nightly-build" 
        depends="continuous-integration,database:reinitialize,test:integration" 
        description="Builds and deploys caIntegrator 2 and performs the complete suite of tests." />

    <target name="clean" 
        depends="clean:caintegrator2-cacore,
        clean:caintegrator2.war,
        clean:site"
        description="Removes all generated artifacts from the working directory." />

    <target name="build" 
        depends="caintegrator2.war"
        description="Compiles all production source code and assembles artifacts." />

    <target name="check" 
        depends="check:checkstyle,check:pmd,static-analysis"
        description="Runs quality checks on the source code.">
        <fail if="checkstyle.failure" message="There were Checkstyle failures." />
        <fail if="pmd.failure" message="There were PMD failures." />
    </target>

    <target name="database" 
        depends="database:reinitialize"
        description="Drops any exisisting instance of the caintegrator2 database; creates and populates a new instance." />

    <target name="test" 
        depends="test:unit,test:integration"
        description="Executes all unit and functional tests." />

    <target name="deploy"
        depends="deploy:jboss"
        description="Deploys the caIntegrator 2 application to JBoss." />
    
    
    <!-- ******************************************************************* -->
    <!-- ** CAINTEGRATOR2-CACORE                                          ** -->
    <!-- ******************************************************************* -->
    <property name="caintegrator2-cacore.output.dir" location="${caintegrator2-cacore.dir}/output/caintegrator2" />
    <property name="caintegrator2-cacore.output.src.dir" location="${caintegrator2-cacore.output.dir}/src" />
    <property name="caintegrator2-cacore.build.jar.dir" location="${caintegrator2-cacore.output.dir}/build/jar" />
    <property name="caintegrator2-beans.jar" location="${caintegrator2-cacore.build.jar.dir}/caintegrator2-beans.jar" />
    <property name="caintegrator2-orm.jar" location="${caintegrator2-cacore.build.jar.dir}/caintegrator2-orm.jar" />
    <property name="csm.security.config.file" location="sdk.csm.new.hibernate.cfg.xml" />
    
    <target name="caintegrator2-beans.jar" depends="build:caintegrator2-cacore" />

    <target name="clean:caintegrator2-cacore">
        <delete file="${caintegrator2-cacore.dir}/models/caintegrator2.xmi" />
        <ant inheritAll="false" inheritRefs="false" dir="${caintegrator2-cacore.dir}" antfile="${caintegrator2-cacore.dir}/build.xml" target="clean" />
    </target>

    <target name="build:caintegrator2-cacore">
	    <!-- temp change location  out to make anthill pro build work
        <copy file="${docs.dir}/analysis_and_design/models/caintegrator2.xmi" tofile="${caintegrator2-cacore.dir}/models/caintegrator2.xmi" />
	-->
	<copy file="${software.dir}/caintegrator2.xmi" tofile="${caintegrator2-cacore.dir}/models/caintegrator2.xmi" />
        <ant inheritAll="false" inheritRefs="false" dir="${caintegrator2-cacore.dir}" antfile="${caintegrator2-cacore.dir}/build.xml" target="build-system" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** CAINTEGRATOR2.WAR                                             ** -->
    <!-- ******************************************************************* -->

    <property name="caintegrator2.war.dir" location="${software.dir}/caintegrator2-war" />
    <property name="caintegrator2.war.java.src.dir" location="${caintegrator2.war.dir}/src" />
    <property name="caintegrator2.war.resources.src.dir" location="${caintegrator2.war.dir}/resources" />
    <property name="caintegrator2.war.web.src.dir" location="${caintegrator2.war.dir}/web" />
    <property name="caintegrator2.war.test.src.dir" location="${caintegrator2.war.dir}/test/src" />
    <property name="caintegrator2.war.resources.test.dir" location="${caintegrator2.war.dir}/test/resources" />
    <property name="caintegrator2.war.target.dir" location="${caintegrator2.war.dir}/target" />
    <property name="caintegrator2.war.java.classes.dir" location="${caintegrator2.war.target.dir}/classes" />
    <property name="caintegrator2.war.instrumented.unit.classes.dir" location="${caintegrator2.war.target.dir}/instrumented-classes/unit" />
    <property name="caintegrator2.war.instrumented.integration.classes.dir" location="${caintegrator2.war.target.dir}/instrumented-classes/integration" />
    <property name="caintegrator2.war.test.classes.dir" location="${caintegrator2.war.target.dir}/test-classes" />
    <property name="caintegrator2.war" location="${caintegrator2.war.target.dir}/caintegrator2.war" />

    <path id="caintegrator2.war.dependencies.path">
        <pathelement location="${caintegrator2.war.java.classes.dir}" />
        <pathelement location="${caintegrator2-beans.jar}" />
        <pathelement location="${caintegrator2-orm.jar}" />
        <pathelement location="${lib.dir}/caDSR-beans.jar" />
        <pathelement location="${lib.dir}/commons-configuration-1.5.jar" />
        <pathelement location="${lib.dir}/commons-fileupload-1.2.1.jar" />
        <pathelement location="${lib.dir}/commons-lang-2.4.jar" />
        <pathelement location="${lib.dir}/commons-io-1.4.jar" />
        <pathelement location="${lib.dir}/commons-logging-1.0.4.jar" />
        <pathelement location="${lib.dir}/ejb3-persistence.jar" />
        <pathelement location="${lib.dir}/freestylesearch.jar" />
        <pathelement location="${lib.dir}/hibernate-annotations.jar" />
        <pathelement location="${lib.dir}/hibernate-validator.jar" />
        <pathelement location="${lib.dir}/netcdf-2.2.22.jar" />
        <pathelement location="${lib.dir}/bufr-1.4.jar" />
        <pathelement location="${lib.dir}/grib-6.0.jar" />
        <pathelement location="${lib.dir}/visadNoDods.jar" />
        <pathelement location="${lib.dir}/nlog4j-1.2.25.jar" />
        <pathelement location="${lib.dir}/opencsv-1.8.jar" />
        <pathelement location="${lib.dir}/xwork-2.1.1.jar" />
        <pathelement location="${lib.dir}/caarray-lib/caarray-client.jar" />
        <pathelement location="${lib.dir}/caarray-lib/caGrid-1.1-data-stubs.jar" />
        <pathelement location="${lib.dir}/caarray-lib/jbossall-client.jar" />
        <pathelement location="${lib.dir}/caarray-lib/jboss-ejb3x.jar" />
        <pathelement location="${lib.dir}/caarray-lib/nci-commons-core-1.0.9.jar" />
        <pathelement location="${ncia.lib.dir}/activation.jar" />
        <pathelement location="${ncia.lib.dir}/addressing-1.0.jar" />
        <pathelement location="${ncia.lib.dir}/axis.jar" />
        <pathelement location="${ncia.lib.dir}/bcprov-jdk15-138.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-core-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/data-common-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-dataExtensions-style-cacore32-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-data-stubs-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-data-utils-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-metadata-common-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-metadata-security-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-ServiceSecurityProvider-client-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-ServiceSecurityProvider-common-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-ServiceSecurityProvider-stubs-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-Transfer-client-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/caGrid-Transfer-stubs-1.2.jar" />
        <pathelement location="${ncia.lib.dir}/castor-1.0.2.jar" />
        <pathelement location="${ncia.lib.dir}/cog-axis.jar" />
        <pathelement location="${ncia.lib.dir}/cog-jglobus.jar" />
        <pathelement location="${ncia.lib.dir}/commons-discovery.jar" />
        <pathelement location="${ncia.lib.dir}/concurrent.jar" />
        <pathelement location="${ncia.lib.dir}/mai.jar" />
        <pathelement location="${ncia.lib.dir}/ncia-client-modified.jar" />
        <pathelement location="${ncia.lib.dir}/NCIACoreService-client.jar" />
        <pathelement location="${ncia.lib.dir}/NCIACoreService-common.jar" />
        <pathelement location="${ncia.lib.dir}/NCIACoreService-stubs.jar" />
        <pathelement location="${ncia.lib.dir}/wsdl4j-1.5.1.jar" />
        <pathelement location="${ncia.lib.dir}/wsrf_core_stubs_enum.jar" />
        <pathelement location="${ncia.lib.dir}/wsrf_core.jar" />
        <pathelement location="${ncia.lib.dir}/wss4j.jar" />
        <pathelement location="${ncia.lib.dir}/xalan.jar" />
        <pathelement location="${ncia.lib.dir}/xercesImpl.jar" />
        <pathelement location="${ncia.lib.dir}/xmlsec.jar" />
        <pathelement location="${caintegrator2-cacore.system.dist.dir}/sdk-client-framework.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/acegi-security-1.0.4.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/commons-collections-3.2.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/hibernate3.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/jaxrpc.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/saaj.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/spring.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/struts2-core-2.0.1.jar" />
        <pathelement location="${caintegrator2-cacore.system.lib.dir}/wsdl4j-1.5.1.jar" />
    </path>

    <path id="caintegrator2.war.test.dependencies.path">
        <pathelement location="${caintegrator2.war.test.classes.dir}" />
        <path refid="caintegrator2.war.dependencies.path" />
        <path refid="test.dependencies.path" />
        <path refid="hibernatetool.classpath" />
        <pathelement location="${lib.dir}/spring-mock.jar" />
        <pathelement location="${caintegrator2.war.resources.src.dir}" />        
        <pathelement location="${caintegrator2.war.resources.test.dir}" />
    </path>
    
    <property name="caintegrator2.war.test.dependencies.path" refid="caintegrator2.war.test.dependencies.path" />

    <target name="clean:caintegrator2.war">
        <delete dir="${caintegrator2.war.target.dir}" />
    </target>

    <target name="caintegrator2.war" depends="caintegrator2-beans.jar,caintegrator2-orm.jar,compile:caintegrator2.war">
        <war destfile="${caintegrator2.war}" webxml="${caintegrator2.war.web.src.dir}/WEB-INF/web.xml">
            <fileset dir="${caintegrator2.war.web.src.dir}">
                <exclude name="WEB-INF/**" />
            </fileset>
            <lib dir="${caintegrator2-cacore.build.jar.dir}">
                <include name="caintegrator2-beans.jar"/>
                <include name="caintegrator2-orm.jar"/>
            </lib>
            <lib dir="${caintegrator2-cacore.system.dist.dir}" includes="*.jar"/>
            <lib dir="${caintegrator2-cacore.system.lib.dir}" includes="*.jar">
                <exclude name="log4j*.jar"/>
                <exclude name="servlet.jar"/>
                <exclude name="commons-logging*.*"/>
                <exclude name="mysql-connector*.*"/>
                <exclude name="xercesImpl*.*"/>
            </lib>
            <lib dir="${lib.dir}">
                <include name="caDSR-beans.jar"/>
                <include name="commons-configuration-1.5.jar"/>
                <include name="commons-fileupload-1.2.1.jar"/>
                <include name="commons-io-1.4.jar"/>
                <include name="commons-lang-2.4.jar"/>
                <include name="ejb3-persistence.jar" />
                <include name="freestylesearch.jar"/>
                <include name="hibernate-annotations.jar" />
                <include name="hibernate-validator.jar" />
                <include name="netcdf-2.2.22.jar" />
                <include name="bufr-1.4.jar" />
                <include name="grib-6.0.jar" />
                <include name="visadNoDods.jar" />
                <include name="nlog4j-1.2.25.jar" />
                <include name="opencsv-1.8.jar" />
                <include name="tiles-api-2.0.6.jar"/>
                <include name="tiles-core-2.0.6.jar"/>
                <include name="tiles-jsp-2.0.6.jar"/>
                <include name="struts2-tiles-plugin-2.1.2.jar"/>
                <include name="xwork-2.1.1.jar"/>
            </lib>
            <lib dir="${ncia.lib.dir}">
                <include name="NCIACoreService-client.jar" />
                <include name="NCIACoreService-common.jar" />
                <include name="NCIACoreService-stubs.jar" />
                <include name="ncia-client-modified.jar" />
           </lib>
            <lib dir="${lib.dir}/caarray-lib">
                <include name="caarray-client.jar" />
                <include name="nci-commons-core-1.0.9.jar" />
            </lib>
            <classes dir="${caintegrator2-cacore.output.src.dir}">
                <include name="${csm.security.config.file}"/>
            </classes>
            <classes dir="${caintegrator2.war.java.classes.dir}" >
                <exclude name="hibernate.cfg.xml" />
            </classes>
            <classes dir="${caintegrator2.war.resources.src.dir}">
                <exclude name="hibernate.cfg.xml" />
                <exclude name="**/*.hbm.xml"/>
            </classes>
            <webinf dir="${caintegrator2-cacore.output.src.dir}">
                <include name="server-config.wsdd"/>
            </webinf>
            <webinf dir="${caintegrator2.war.resources.src.dir}">
                <include name="tiles.xml"/>
            </webinf>
            <webinf dir="${caintegrator2.war.web.src.dir}/WEB-INF">
                <exclude name="web.xml"/>
            </webinf>
        </war>
    </target>

    <target name="compile:caintegrator2.war" depends="caintegrator2-beans.jar,caintegrator2-orm.jar">
        <mkdir dir="${caintegrator2.war.java.classes.dir}" />
        <javac srcdir="${caintegrator2.war.java.src.dir}" destdir="${caintegrator2.war.java.classes.dir}" classpathref="caintegrator2.war.dependencies.path" debug="true" />
    </target>

    <target name="test:unit:caintegrator2.war" depends="test:compile:caintegrator2.war.test.classes,test:instrument:unit:caintegrator2.war">
        <run-junit-tests test.src.dir="${caintegrator2.war.test.src.dir}" 
            xml.output.dir="${caintegrator2.war.target.dir}/junit" 
            instrumented.classes="${caintegrator2.war.instrumented.unit.classes.dir}" 
            classpath="${caintegrator2.war.test.dependencies.path}" />
    </target>

    <target name="test:integration:caintegrator2.war" depends="test:compile:caintegrator2.war.test.classes,
        test:instrument:integration:caintegrator2.war,
        hibernate.cfg.xml.test,
        database:reinitialize">
        <run-integration-junit-tests test.src.dir="${caintegrator2.war.test.src.dir}" 
            xml.output.dir="${caintegrator2.war.target.dir}/junit" 
            instrumented.classes="${caintegrator2.war.instrumented.integration.classes.dir}" 
            classpath="${caintegrator2.war.test.dependencies.path}" />
    </target>
    
    <target name="test:instrument:unit:caintegrator2.war" depends="compile:caintegrator2.war">
         <cobertura-instrument todir="${caintegrator2.war.instrumented.unit.classes.dir}" datafile="${cobertura.file}">
             <fileset  dir="${caintegrator2.war.java.classes.dir}">
                 <include name="gov/nih/nci/caintegrator2/**" />
                 <!-- Excludes for classes that can only be tested in integration tests -->
                 <exclude name="gov/nih/nci/caintegrator2/data/CaIntegrator2DaoImpl.class" />
                 <exclude name="gov/nih/nci/caintegrator2/external/ncia/NCIASearchServiceImpl.class" />
                 <exclude name="gov/nih/nci/caintegrator2/external/ncia/NCIAServiceFactoryImpl.class" />
                 <exclude name="gov/nih/nci/caintegrator2/common/GenericEnumUserType.class" />
                 <exclude name="gov/nih/nci/caintegrator2/common/ConfigurationHelperImpl.class" />
             </fileset>
         </cobertura-instrument>
     </target>
    
    <target name="test:instrument:integration:caintegrator2.war" depends="compile:caintegrator2.war">
         <cobertura-instrument todir="${caintegrator2.war.instrumented.integration.classes.dir}" datafile="${cobertura.file}">
             <fileset dir="${caintegrator2.war.java.classes.dir}">
                 <include name="gov/nih/nci/caintegrator2/**" />
             </fileset>
         </cobertura-instrument>
     </target>

    <target name="test:compile:caintegrator2.war.test.classes" depends="compile:caintegrator2.war">
        <mkdir dir="${caintegrator2.war.test.classes.dir}" />
        <javac srcdir="${caintegrator2.war.test.src.dir}" destdir="${caintegrator2.war.test.classes.dir}" classpathref="caintegrator2.war.test.dependencies.path" debug="true" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** CAINTEGRATOR2-ORM.JAR                                         ** -->
    <!-- ******************************************************************* -->
    <target name="caintegrator2-orm.jar" depends="build:caintegrator2-cacore,hibernate.cfg.xml.deploy">
        <delete file="${caintegrator2-orm.jar}" />
        <jar destfile="${caintegrator2-orm.jar}">
            <manifest>
                <attribute name="Generated-By" value="caCORE SDK Code Generator"/>
            </manifest>
            <fileset dir="${caintegrator2-cacore.output.src.dir}">
                <include name="**/*.hbm.xml"/>
                <include name="ehcache.xml"/>
            </fileset>
            <fileset dir="${caintegrator2.war.resources.src.dir}">
                <include name="**/*.hbm.xml"/>
            </fileset>
                <fileset dir="${caintegrator2.war.java.classes.dir}">
                    <include name="hibernate.cfg.xml"/>
                </fileset>
        </jar>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** DATABASE TARGETS                                              ** -->
    <!-- ******************************************************************* -->
    
    <property name="caintegrator2db.dir" location="${software.dir}/common/resources/db-install/mysql" />
    <property name="caintegrator2db.sql.src.dir" location="${caintegrator2db.dir}" />
    <property name="caintegrator2db.sql.target.dir" location="${caintegrator2db.dir}/target/sql" />
    <property name="comment.start" value="&lt;!-- " />
    <property name="comment.end" value=" -->" />

    <target name="database:init-sql">
        <mkdir dir="${caintegrator2db.sql.target.dir}" />
        <copy todir="${caintegrator2db.sql.target.dir}">
            <filterset refid="caintegrator2.filterset" />
            <fileset dir="${caintegrator2db.sql.src.dir}" includes="*.sql" />
        </copy>
    </target>

    <target name="database:drop-tables" description="Drop caIntegrator 2 schema">
        <run-sql-script onerror="continue" sql.file="${caintegrator2db.sql.target.dir}/drop-main-tables.sql" />
        <run-sql-script onerror="continue" sql.file="${caintegrator2db.sql.target.dir}/drop-supporting-tables.sql" />
	  <run-sql-script onerror="continue" sql.file="${caintegrator2db.sql.target.dir}/drop-csm-tables.sql" />
    </target>

    <target name="database:create-tables" description="Create caIntegrator 2 schema">
        <run-sql-script sql.file="${caintegrator2db.sql.target.dir}/create-main-tables.sql" />
        <run-sql-script sql.file="${caintegrator2db.sql.target.dir}/create-supporting-tables.sql" />
	  <run-sql-script sql.file="${caintegrator2db.sql.target.dir}/create-csm-tables.sql" />
	  <run-sql-script sql.file="${caintegrator2db.sql.target.dir}/prime-csm-tables.sql" />
    </target>

    <target name="database:create-tables-generated" depends="database:generate-sql">
        <run-sql-script sql.file="${caintegrator2db.sql.target.dir}/create-tables-generated.sql" />
    </target>

    <target name="database:reinitialize-tables" depends="database:drop-tables,database:create-tables" description="Drop &amp; recreate caIntegrator 2 schema" />

    <target name="database:reinitialize" depends="database:init-sql" description="Completely reset caIntegrator 2 by dropping database, recreating, and creating schema, and populating with initial data">
        <antcall target="database:recreate-database" />
        <antcall target="database:create-tables" />
    </target>

        <target name="database:reinitialize-generated" depends="database:init-sql" description="Completely reset caIntegrator 2 by dropping database, recreating, and creating schema (from generated files), and populating with initial data">
            <antcall target="database:recreate-database" />
            <antcall target="database:create-tables-generated" />
        </target>

    <target name="database:recreate-database" description="Drops and recreates caintegrator2 database">
        <run-sql-script database.url="${database.system.url}" 
            database.user="${database.system.user}" 
            database.password="${database.system.password}" 
            sql.file="${caintegrator2db.sql.target.dir}/create-database-and-user.sql" />
    </target>

    <target name="database:generate-sql" depends="compile:caintegrator2.war">
        <hibernatetool destdir="${caintegrator2db.sql.target.dir}">
            <configuration configurationfile="${caintegrator2.war.resources.src.dir}/hibernate.cfg.xml" />
            <hbm2ddl drop="false" create="true" export="false" outputfilename="create-tables-generated.sql" />
            <hbm2ddl drop="true" create="false" export="false" outputfilename="drop-tables-generated.sql" />
            <classpath>
                <pathelement location="${caintegrator2-beans.jar}" />
                <pathelement location="${caintegrator2-orm.jar}" />
                <pathelement location="${caintegrator2.war.java.classes.dir}" />
                <pathelement location="${caintegrator2.war.resources.src.dir}" />
            </classpath>
        </hibernatetool>
    </target>
    
    <target name="database:test-data" depends="database:reinitialize,test:compile:caintegrator2.war.test.classes,hibernate.cfg.xml.test">
        <java classname="gov.nih.nci.caintegrator2.data.DataGenerator" classpathref="caintegrator2.war.test.dependencies.path" />
    </target>
    
    <property name="hibernate.cfg.xml.src" value="${caintegrator2.war.resources.src.dir}/hibernate.cfg.xml" />
    <property name="hibernate.cfg.xml.test" value="${caintegrator2.war.test.classes.dir}/hibernate.cfg.xml" />
    <property name="hibernate.cfg.xml.deploy" value="${caintegrator2.war.java.classes.dir}/hibernate.cfg.xml" />

    <target name="hibernate.cfg.xml.test">
        <copy file="${hibernate.cfg.xml.src}" tofile="${hibernate.cfg.xml.test}" overwrite="true">
            <filterset refid="caintegrator2.filterset" />
            <filterset>
                <filter token="HIBERNATE_CONFIG_START" value="${comment.end}" />
                <filter token="HIBERNATE_CONFIG_END" value="${comment.start}" />
            </filterset>
        </copy>
    </target>

    <target name="hibernate.cfg.xml.deploy">
        <copy file="${hibernate.cfg.xml.src}" tofile="${hibernate.cfg.xml.deploy}" overwrite="true">
            <filterset refid="caintegrator2.filterset" />
            <filterset>
                <filter token="DATASOURCE_CONFIG_START" value="${comment.end}" />
                <filter token="DATASOURCE_CONFIG_END" value="${comment.start}" />
            </filterset>
        </copy>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** CLASSPATHS                                                    ** -->
    <!-- ******************************************************************* -->

    <path id="caintegrator2.full.classpath">
        <path refid="caintegrator2.war.dependencies.path" />
        <pathelement location="${caintegrator2.war.java.classes.dir}" />
        <pathelement location="${caintegrator2-beans.jar}" />
        <pathelement location="${caintegrator2-orm.jar}" />
        <!-- axis.jar is included for the MalformedURIException for Checkstyle -->
        <pathelement location="${ncia.lib.dir}/axis.jar" />
    </path>

    <!-- ******************************************************************* -->
    <!-- ** TEST TARGETS                                                  ** -->
    <!-- ******************************************************************* -->

    <!-- JUnit Test Targets -->
    <target name="test:unit" depends="test:unit:caintegrator2.war,
      test:junit-report,
      test:cobertura-report,
      test:cobertura-check">
        <fail if="junit.failure" message="There were JUnit failures." />
        <fail if="cobertura.failure" message="Test coverage was insufficient (see Cobertura report)." />
    </target>

    <target name="test:integration" depends="test:integration:caintegrator2.war,
        test:junit-report-integration">
        <fail if="junit.failure" message="There were JUnit failures." />
    </target>

    <target name="test:junit-report">
        <mkdir dir="${site.dir}/junit/unit" />
        <junitreport todir="${site.dir}/junit/unit">
            <fileset dir="${caintegrator2.war.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${site.dir}/junit/unit" />
        </junitreport>
    </target>

    <target name="test:junit-report-integration">
        <mkdir dir="${site.dir}/junit/integration" />
        <junitreport todir="${site.dir}/junit/integration">
            <fileset dir="${caintegrator2.war.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${site.dir}/junit/integration" />
        </junitreport>
    </target>

    <!-- Cobertura Test Targets -->
    <target name="test:cobertura-report">
        <cobertura-report format="xml" destdir="${site.dir}/cobertura/unit" datafile="${cobertura.file}">
            <fileset dir="${caintegrator2.war.java.src.dir}" />
        </cobertura-report>
        <cobertura-report format="html" destdir="${site.dir}/cobertura/unit" datafile="${cobertura.file}">
            <fileset dir="${caintegrator2.war.java.src.dir}" />
        </cobertura-report>
    </target>

    <target name="test:cobertura-check">
        <cobertura-check failureproperty="cobertura.failure" datafile="${cobertura.file}" haltonfailure="false" linerate="0" packagebranchrate="0" packagelinerate="0" totalbranchrate="70" totallinerate="80" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** CHECK TARGETS                                                 ** -->
    <!-- ******************************************************************* -->

    <target name="check:checkstyle" depends="build">
        <mkdir dir="${site.dir}/checkstyle" />
        <checkstyle config="${checkstyle.config}" 
            failureProperty="checkstyle.failure" 
            failOnViolation="false" 
            maxerrors="0" 
            maxwarnings="0"
            classpathref="caintegrator2.full.classpath" >
            <formatter type="xml" tofile="${site.dir}/checkstyle/checkstyle.xml" />
            <fileset dir="${caintegrator2.war.java.src.dir}" includes="**/*.java" />
        </checkstyle>
        <xslt in="${site.dir}/checkstyle/checkstyle.xml" out="${site.dir}/checkstyle/checkstyle.html" style="${resource.dir}/checkstyle/checkstyle-frames.xsl">
            <param name="output.dir" expression="${site.dir}/checkstyle" />
        </xslt>
    </target>

    <target name="check:pmd">
        <mkdir dir="${site.dir}/pmd" />

        <pmd failonerror="false" rulesetfiles="${resource.dir}/pmd/pmd-ruleset.xml" failurespropertyname="pmd.failure" targetjdk="1.5">
            <formatter type="xml" toFile="${site.dir}/pmd/pmd-report.xml" toConsole="false" />
            <fileset dir="${caintegrator2.war.java.src.dir}">
                <include name="**/*.java" />
            </fileset>
        </pmd>

        <xslt in="${site.dir}/pmd/pmd-report.xml" out="${site.dir}/pmd/pmd-report.html" style="${resource.dir}/pmd/pmd-report-per-class.xslt">
        </xslt>
    </target>

    <target name="check:pmd:update-eclipse-projects">
        <copy file="${resource.dir}/pmd/pmd-ruleset.xml" tofile="${caintegrator2.war.dir}/.ruleset" />
    </target>
    
    <!-- ******************************************************************* -->
    <!-- ** DEPLOYMENT TARGETS                                            ** -->
    <!-- ******************************************************************* -->
    
    <property name="jboss.home" location="${env.JBOSS_HOME}" />
    <property name="jboss.server.name" value="default" />
    <property name="jboss.server.dir" location="${jboss.home}/server/${jboss.server.name}" />
    <property name="jboss.deploy.dir" location="${jboss.server.dir}/deploy" />
    <property name="caintegrator2.datasource" location="${software.dir}/common/resources/jboss-conf/caintegrator2-mysql-ds.xml" />
    
    <target name="deploy:jboss" depends="caintegrator2.war">
        <copy file="${caintegrator2.datasource}" todir="${jboss.deploy.dir}">
            <filterset refid="caintegrator2.filterset" />
        </copy>
        <copy file="${lib.dir}/mysql-connector-java-5.0.5-bin.jar" todir="${jboss.server.dir}/lib" />
        <copy file="${caintegrator2.war}" todir="${jboss.deploy.dir}" />
    </target>

    <target name="deploy:jsp" description="Copies all current JSP code to the deployed application for quick update">
        <for param="toDir">
            <path>
                <dirset dir="${jboss.deploy.dir}/../tmp/deploy" includes="tmp*caintegrator2-exp.war" />
            </path>
            <sequential>
                <copy todir="@{toDir}">
                    <fileset dir="${caintegrator2.war.web.src.dir}">
                        <include name="**/*.jsp" />
                        <include name="**/*.jspf" />
                        <include name="**/*.css" />
                        <include name="**/*.js" />
                        <include name="**/*.jpg" />
                        <include name="**/*.gif" />
                        <include name="**/*.png" />
                        <include name="**/*.faces" />
                        <include name="**/*.tag" />
                        <include name="**/*.tagf" />
                    </fileset>
                </copy>
            </sequential>
        </for>
    </target>
    
    <!-- ******************************************************************* -->
    <!-- ** DOCUMENTATION TARGETS                                         ** -->
    <!-- ******************************************************************* -->

    <target name="javadoc" depends="javadoc:full,javadoc:client" description="Generates javadoc for all source code" />

    <target name="javadoc:full" depends="build:caintegrator2-cacore">
        <mkdir dir="${site.dir}/docs/api" />
        <javadoc destdir="${site.dir}/docs/api" classpathref="caintegrator2.full.classpath">
            <packageset dir="${caintegrator2.war.java.src.dir}" />
            <packageset dir="${caintegrator2-cacore.output.src.dir}" />
        </javadoc>
    </target>

    <target name="javadoc:client" depends="build:caintegrator2-cacore">
        <mkdir dir="${site.dir}/docs/client-api" />
        <javadoc destdir="${site.dir}/docs/client-api" classpathref="caintegrator2.full.classpath">
            <packageset dir="${caintegrator2-cacore.output.src.dir}" />
        </javadoc>
    </target>

    
    <!-- ******************************************************************* -->
    <!-- ** MACRODEFS                                                     ** -->
    <!-- ******************************************************************* -->

    <macrodef name="run-integration-junit-tests">
        <attribute name="test.src.dir" />
        <attribute name="xml.output.dir" />
        <attribute name="classpath" default="" />
        <attribute name="instrumented.classes" default="" />

        <sequential>
            <mkdir dir="@{xml.output.dir}" />
            <junit printsummary="on" failureproperty="junit.failure" fork="true" forkmode="once" maxmemory="256m">
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.file}" />
                <sysproperty key="server.hostname" value="${jboss.server.hostname}" />
                <sysproperty key="server.port" value="${jboss.server.port}" />
                <sysproperty key="server.jndi.port" value="${jboss.server.jndi.port}" />
                <sysproperty key="selenium.server.port" value="${selenium.server.port}" />

                <classpath>
                    <pathelement path="@{instrumented.classes}" />
                    <pathelement path="@{classpath}" />
                    <path refid="cobertura.classpath" />
                </classpath>
                <formatter type="xml" />
                <batchtest todir="@{xml.output.dir}">
                    <fileset dir="@{test.src.dir}">
                        <include name="**/*TestIntegration.java" />
                        <exclude name="**/Abstract*TestIntegration.java" />
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

	<property name="reports.dir" value="${software.dir}/reports"/>
	<property name="reports.simian.dir" value="${reports.dir}/simian"/>
	<property name="reports.pmd.dir" value="${reports.dir}/pmd-new"/>
	<property name="reports.checkstyle.dir" value="${reports.dir}/checkstyle-new"/>
	<property name="reports.javancss.dir" value="${reports.dir}/javancss"/>
	<property name="reports.findbugs.dir" value="${reports.dir}/findbugs"/>

	<target name="static-analysis:ivy-init" 
		depends="
		init:ivy,
		static-analysis:ivy-test-selenium,
		static-analysis:ivy-test-junit,
		static-analysis:ivy-test-cobertura,
		static-analysis:ivy-test-javancss,
		static-analysis:ivy-test-checkstyle,
		static-analysis:ivy-test-simian,
		static-analysis:ivy-test-pmd
		"/>
	<target name="static-analysis:ivy-test-selenium" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-selenium" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
	</target>
	<target name="static-analysis:ivy-test-junit" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-junit" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
	</target>
	<target name="static-analysis:ivy-test-cobertura" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-cobertura" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
	</target>
	<target name="static-analysis:ivy-test-javancss" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-javancss" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-javancss" />
	</target>
	<target name="static-analysis:ivy-test-checkstyle" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-checkstyle" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
	</target>
	<target name="static-analysis:ivy-test-pmd" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
	</target>
	<target name="static-analysis:ivy-test-simian" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-simian" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
	</target>


	<!-- This is a wrapper target for all static analysis targets -->
	<target name="static-analysis" description="Performs static analysis"
		depends="
		static-analysis:ivy-init,
		static-analysis:init,
		static-analysis:findbugs-init,
		static-analysis:simian,
		static-analysis:pmd,
		static-analysis:checkstyle,
		static-analysis:javancss,
		static-analysis:findbugs
		"/>

	<!-- Creates paths and  directories -->
	<target name="static-analysis:init">
		<path id="ivy.classpath">
			<fileset dir="${software.dir}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.selenium.classpath">
			<fileset dir="${lib.dir}/test-selenium">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.junit.classpath">
			<fileset dir="${lib.dir}/test-junit">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.cobertura.classpath">
			<fileset dir="${lib.dir}/test-cobertura">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.javancss.classpath">
			<fileset dir="${lib.dir}/test-javancss">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.checkstyle.classpath">
			<fileset dir="${lib.dir}/test-checkstyle">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.pmd.classpath">
			<fileset dir="${lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.simian.classpath">
			<fileset dir="${lib.dir}/test-simian">
				<include name="*.jar" />
			</fileset>
		</path>
		<mkdir dir="${reports.dir}"/>
		<mkdir dir="${reports.simian.dir}"/>
		<mkdir dir="${reports.pmd.dir}"/>
		<mkdir dir="${reports.checkstyle.dir}"/>
		<mkdir dir="${reports.javancss.dir}"/>
		<mkdir dir="${reports.findbugs.dir}"/>
	</target>

	<!-- Findbugs is realy a full application that has ant support.  This target downloads the binaries for this distribution for use by ant target.  Additionaly setups a jboss installation to uses in the classpath of findbugs to cover runtime libraries -->
	<target name="static-analysis:findbugs-init" >
		<property name="temp.dir" value="${software.dir}/temp"/>
		<mkdir dir="${temp.dir}"/>
		<property name="findbugs.home.dir" value="${lib.dir}/${findbugs.binaries.relative.dir}"/>
		<if>
			<not>
				<available file="${findbugs.home.dir}/lib/findbugs.jar"/>
			</not>
			<then>
				<echo message="Findbugs is missing, downloading and isnstalling in ${findbugs.home.dir}"/>
				<get src="${findbugs.src.url}"
					dest="${temp.dir}/${findbugs.binaries.file}"/>
				<unzip dest="${lib.dir}" src="${temp.dir}/${findbugs.binaries.file}" />
			</then>
		</if>
		<path id="project.test.findbugs.classpath">
			<fileset dir="${findbugs.home.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<!-- One target and one macro have been written for each static-analysis tool.  The macro runs static-analysis on an one set of values. The target then calls the macro with values for each sub-project.  If a user wanted to add options to the static-analysis tool in the the macro, they could add an attribute, refer to that attribute in the static-analysis call and then add the option to each of the calls to the marco in the wrapper target.
	-->
	<!-- Runs Simian a code duplication reporter.
		You can find additional information about simian at:
		http://www.redhillconsulting.com.au/products/simian/installation.html
		-->
	<target name="static-analysis:simian" depends="static-analysis:init" description="Performs code duplication analysis">
		<static-analysis-simian
			simian.src.dir="${caintegrator2.war.java.src.dir}"
			simian.rpt.dir="${reports.simian.dir}"
			simian.report-xsl.file="${common.dir}/simian/simian.xsl"
			simian.xml.name="simian-caintegrator2-war.xml"
			simian.html.name="simian-caintegrator2-war.html"
			/>

	</target>
	<macrodef name="static-analysis-simian">
		<attribute name="simian.src.dir"/>
		<attribute name="simian.rpt.dir"/>
		<attribute name="simian.report-xsl.file"/>
		<attribute name="simian.xml.name" default="simian.xml"/>
		<attribute name="simian.html.name" default="simian.html"/>
		<sequential>
			<taskdef resource="simiantask.properties" classpathref="project.test.simian.classpath" />
			<simian
				failureProperty="simian.failure"
				failOnDuplication="failse"
				>
				<fileset dir="@{simian.src.dir}" includes="**/*.java"/>
				<formatter type="xml" toFile="@{simian.rpt.dir}/@{simian.xml.name}"/>
			</simian>
			<xslt in="@{simian.rpt.dir}/@{simian.xml.name}" out="@{simian.rpt.dir}/@{simian.html.name}" style="@{simian.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:pmd"
		depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-pmd
			pmd.src.dir="${caintegrator2.war.java.src.dir}"
			pmd.rpt.dir="${reports.pmd.dir}"
			pmd.project.name="${project.name}"
			pmd.sub-project.name="caintegrator2-war"
			pmd.report-xsl.file="${common.dir}/pmd/pmd-report-per-class.xslt"
			pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst"
			pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset.xml"
			pmd.xml.name="pmd-report.xml"
			pmd.html.name="pmd-report.html"
			/>
	</target>

	<macrodef name="static-analysis-pmd">
		<attribute name="pmd.src.dir"/>
		<attribute name="pmd.rpt.dir"/>
		<attribute name="pmd.project.name"/>
		<attribute name="pmd.sub-project.name"/>
		<attribute name="pmd.report-preprocessor.file"/>
		<attribute name="pmd.report-xsl.file"/>
		<attribute name="pmd.rule-set.file"/>
		<attribute name="pmd.xml.name" default="pmd.xml"/>
		<attribute name="pmd.html.name" default="pmd.html"/>
		<sequential>
			<property name="pmd.sub-project.rpt.dir" value="@{pmd.rpt.dir}/@{pmd.sub-project.name}/target"/>
			<mkdir dir="${pmd.sub-project.rpt.dir}"/>
			<taskdef name="pmd" 
				classname="net.sourceforge.pmd.ant.PMDTask"
				classpathref="project.test.pmd.classpath"/>
			<!--
			<pmd 
				shortFilenames="true" 
			-->
			<pmd 
				rulesetfiles="@{pmd.rule-set.file}"
				failonerror="false"
				failurespropertyname="pmd.failure"
				targetjdk="1.5"
				>
				<formatter type="xml"
					toFile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" />
				<fileset dir="@{pmd.src.dir}">
					<include name="**/*.java"/>
				</fileset>
			</pmd>
			<move file="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" tofile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak"/>
			<xslt taskname="pmd"
				in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak"
				out="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}"
				style="@{pmd.report-preprocessor.file}">
				<param name="relative.path" expression="@{pmd.project.name}/@{pmd.sub-project.name}"/>
			</xslt>

			<xslt taskname="pmd"
				in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}"
				out="${pmd.sub-project.rpt.dir}/@{pmd.html.name}"
				style="@{pmd.report-xsl.file}"/>
		</sequential>
	</macrodef>

	<!-- Runs JavaNCSS a tool that identifies code Cyclomatic Complexity.
		You can find additional information about JavaNCSS at:
		http://www.kclee.de/clemens/java/javancss/
		-->
	<target name="static-analysis:javancss"
		depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-javancss
			javancss.src.dir="${caintegrator2.war.java.src.dir}"
			javancss.rpt.dir="${reports.javancss.dir}"
			javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl"
			javancss.xml.name="javancss_metrics_caintegrator2-war.xml"
			javancss.html.name="javancss_report_caintegrator2-war.html"
			/>
	</target>

	<macrodef name="static-analysis-javancss">
		<attribute name="javancss.src.dir"/>
		<attribute name="javancss.rpt.dir"/>
		<attribute name="javancss.report-xsl.file"/>
		<attribute name="javancss.xml.name" default="javancss.xml"/>
		<attribute name="javancss.html.name" default="javancss.html"/>
		<sequential>
			<taskdef name="javancss" classpathref="project.test.javancss.classpath" classname="javancss.JavancssAntTask" />
			<javancss
				srcdir="@{javancss.src.dir}"
				includes="**/*.java"
				excludes="**/*test*/*"
				generatereport="true"
				outputfile="@{javancss.rpt.dir}/@{javancss.xml.name}"
				ccnPerFuncMax="10"
				format="xml">
			</javancss>
			<xslt taskname="javancss"
				in="@{javancss.rpt.dir}/@{javancss.xml.name}"
				out="@{javancss.rpt.dir}/@{javancss.html.name}"
				style="@{javancss.report-xsl.file}"/>
		</sequential>
	</macrodef>

	<!-- Runs Findbugs a tool that attempts to find bugs.
		You can find additional information about findbugs at:
		http://findbugs.sourceforge.net/
		-->
	<target name="static-analysis:findbugs" 
		depends="
		caintegrator2.war,
		static-analysis:ivy-init,
		static-analysis:findbugs-init,
		static-analysis:init
		">
		<mkdir dir="${reports.findbugs.dir}/caintegrator2"/>

		<static-analysis-findbugs
			findbugs.home.dir="${findbugs.home.dir}"
			findbugs.src.dir="${caintegrator2.war.java.src.dir}"
			findbugs.classes.dir="${caintegrator2.war.java.classes.dir}"
			findbugs.rpt.dir="${reports.findbugs.dir}/caintegrator2"
			findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl"
			findbugs.app.classpath.ref="caintegrator2.full.classpath" 
			findbugs.xml.name="findbugs.xml"
			findbugs.html.name="findbugs.html"
			/>
	</target>

	<macrodef name="static-analysis-findbugs">
		<attribute name="findbugs.home.dir"/>
		<attribute name="findbugs.src.dir"/>
		<attribute name="findbugs.rpt.dir"/>
		<attribute name="findbugs.classes.dir"/>
		<attribute name="findbugs.report-xsl.file"/>
		<attribute name="findbugs.app.classpath.ref"/>
		<attribute name="findbugs.xml.name" default="findbugs.xml"/>
		<attribute name="findbugs.html.name" default="findbugs.html"/>
		<sequential>
			<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="project.test.findbugs.classpath"/>

			<findbugs home="@{findbugs.home.dir}"
				output="xml:withMessages"
				outputFile="@{findbugs.rpt.dir}/@{findbugs.xml.name}"
				jvmargs="-Xms128m -Xmx512m"
				>
				<auxClasspath>
					<!--
					<fileset dir="@{findbugs.app.classpath.dir}">
						<include name="**/*.jar" />
					</fileset>
					-->
					<fileset refid="@{findbugs.app.classpath.ref}"/>
				</auxClasspath>

				<sourcePath path="@{findbugs.src.dir}" />
				<class location="@{findbugs.classes.dir}" />
			</findbugs>
			<xslt taskname="findbugs"
				in="@{findbugs.rpt.dir}/@{findbugs.xml.name}"
				out="@{findbugs.rpt.dir}/@{findbugs.html.name}"
				style="@{findbugs.report-xsl.file}"
				/>
		</sequential>
	</macrodef>

	<!-- Runs CheckStyle is a codeing standard violation reporter.  
		You can find additional information about checkstyle at:
		http://checkstyle.sourceforge.net/
		-->
	<target name="static-analysis:checkstyle" 
		depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-checkstyle
			checkstyle.src.dir="${caintegrator2.war.java.src.dir}"
			checkstyle.rpt.dir="${reports.checkstyle.dir}"
			checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-frames.xsl"
			checkstyle.config.file="${checkstyle.config}"
			checkstyle.xml.name="checkstyle.xml"
			checkstyle.html.name="checkstyle.html"
			checkstyle.classpath.ref.name="caintegrator2.full.classpath"
			/>
	</target>

	<macrodef name="static-analysis-checkstyle">
		<attribute name="checkstyle.src.dir"/>
		<attribute name="checkstyle.rpt.dir"/>
		<attribute name="checkstyle.report-xsl.file"/>
		<attribute name="checkstyle.config.file"/>
		<attribute name="checkstyle.xml.name" default="checkstyle.xml"/>
		<attribute name="checkstyle.html.name" default="checkstyle.html"/>
		<attribute name="checkstyle.classpath.ref.name" />
		<sequential>
			<taskdef resource="checkstyletask.properties"
				uri="antlib:com.puppycrawl.tools.checkstyle"
				classpathref="project.test.checkstyle.classpath"/>
			<cs:checkstyle config="@{checkstyle.config.file}"
				failureProperty="checkstyle.failure" 
				failOnViolation="false"
				maxerrors="0" 
				maxwarnings="0"
				classpathref="@{checkstyle.classpath.ref.name}"
				>
				<formatter type="xml" 
					tofile="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}"/>
				<fileset dir="@{checkstyle.src.dir}">
					<include name="**/*.java"/>
				</fileset>
			</cs:checkstyle>
			<xslt taskname="checkstyle"
				in="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}"
				out="@{checkstyle.rpt.dir}/@{checkstyle.html.name}"
				style="@{checkstyle.report-xsl.file}"
				>
				<param name="output.dir" expression="@{checkstyle.rpt.dir}" />
			</xslt>

		</sequential>
	</macrodef>
    
    <target name="ivy-test" depends="ivy-test-runtime, ivy-test-compile" description="Updates the local ivy repository"/>
    
    <target name="ivy-test-runtime" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" conf="runtime" />
        <ivy:retrieve pattern="${lib.dir}/caintegrator2-[conf]/[artifact]-[revision].[ext]" conf="runtime" />
    </target>
            
    <target name="ivy-test-compile" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" conf="compile" />
        <ivy:retrieve pattern="${lib.dir}/caintegrator2-[conf]/[artifact]-[revision].[ext]" conf="compile" />
    </target>

</project>
